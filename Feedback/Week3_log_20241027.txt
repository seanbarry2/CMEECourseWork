Starting testing for Sean, Week3

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 3.27 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: .git, week1, week2, Feedback, week3

Found the following files in parent directory: .gitignore, gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*~ 
*.tmp

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
My CMEE Coursework Repository

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: week1, week2, week3

The Week3 directory will be tested 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Testing WEEK3...

Found the following directories: results, data, code

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
**Week 3 Readme - Basics in R (and Jupyter notebook)**

This project focuses on teaching the basics of data wrangling and visualization in R. Key objectives include structuring raw data, making Rscripts, automating data manipulation, and producing clear, reproducible visualizations to reveal trends within the dataset. Additionally, a brief introduction into Jupyter notebook was completed, where the layout and basic usage of the program were clarified.

**Languages**
R (v4.x)

**Dependencies**
tidyverse – for comprehensive data manipulation and visualization
reshape2 – for transforming data between wide and long formats
ggplot2 (included in tidyverse) – for data visualization

**Files**
DataWrang.R: Main script for data wrangling, used to teach most basic commands in R while also teaching the basics of 'wrangling' data in general. 
PoundHillData.csv: Raw data file containing species observations per quadrat, without headers. (Used as data for DataWrang.R)
PoundHillMetaData.csv: Metadata file containing descriptions of the variables and sampling structure.
EcolArchives-E089-52-D1.csv: Dataset that contains records of feeding interactions between predator and prey. (Used to teach basic plotting commands).
MyFirstJupyterNb.ipynb: Jupyter notebook containing a few lines of code used to teach basics of Jupyter.

**Author**
Sean Barry
Email: sb4524@ic.ac.uk

**********************************************************************

Found following files in results directory: TestR.Rout, Pred_Prey_Overlay.pdf, TreeHts.csv, MyFirst-ggplot2-Figure.pdf, MyData.csv, errorFile.Rout, outputFile.Rout, TestR_errFile.Rout...

Ideally, Results directory should be empty other than, perhaps a .gitkeep. 

Found 23 code files: break.R, sample.R, R_conditionals.R, apply1.R, basic_io.R, SQLinR.R, Girko.R, boilerplate.R, apply2.R, DataWrang.R, try.R, MyFirstJupyterNb.ipynb, control_flow.R, MyBars.R, TreeHeight.R, Vectorize.R, TestR.py, TestR.R, plotLin.R, next.R, browse.R, preallocate.R, MyFirstJupyterNb-checkpoint.ipynb

======================================================================
Testing script/code files...

======================================================================
Inspecting script file break.R...

File contents are:

**********************************************************************
i <- 0 #Initialize i
    while (i < Inf) {
        if (i == 10) {
            break 
        } else { # Break out of the while loop!  
            cat("i equals " , i , " \n")
            i <- i + 1 # Update i
    }
}

**********************************************************************

Testing break.R...

Output (only first 500 characters): 


**********************************************************************
i equals  0  
i equals  1  
i equals  2  
i equals  3  
i equals  4  
i equals  5  
i equals  6  
i equals  7  
i equals  8  
i equals  9  

**********************************************************************

Code ran without errors

Time consumed = 0.11077s

======================================================================
Inspecting script file sample.R...

File contents are:

**********************************************************************
######### Functions ##########

## A function to take a sample of size n from a population "popn" and return its mean
myexperiment <- function(popn,n) {
    pop_sample <- sample(popn, n, replace = FALSE)
    return(mean(pop_sample))
}

## Calculate means using a FOR loop on a vector without preallocation:
loopy_sample1 <- function(popn, n, num) {
    result1 <- vector() #Initialize empty vector of size 1 
    for(i in 1:num) {
        result1 <- c(result1, myexperiment(popn, n))
    }
    return(result1)
}

## To run "num" iterations of the experiment using a FOR loop on a vector with preallocation:
loopy_sample2 <- function(popn, n, num) {
    result2 <- vector(,num) #Preallocate expected size
    for(i in 1:num) {
        result2[i] <- myexperiment(popn, n)
    }
    return(result2)
}

## To run "num" iterations of the experiment using a FOR loop on a list with preallocation:
loopy_sample3 <- function(popn, n, num) {
    result3 <- vector("list", num) #Preallocate expected size
    for(i in 1:num) {
        result3[[i]] <- myexperiment(popn, n)
    }
    return(result3)
}


## To run "num" iterations of the experiment using vectorization with lapply:
lapply_sample <- function(popn, n, num) {
    result4 <- lapply(1:num, function(i) myexperiment(popn, n))
    return(result4)
}

## To run "num" iterations of the experiment using vectorization with sapply:
sapply_sample <- function(popn, n, num) {
    result5 <- sapply(1:num, function(i) myexperiment(popn, n))
    return(result5)
}

set.seed(12345)
popn <- rnorm(10000) # Generate the population
hist(popn)

n <- 100 # sample size for each experiment
num <- 10000 # Number of times to rerun the experiment

print("Using loops without preallocation on a vector took:" )
print(system.time(loopy_sample1(popn, n, num)))

print("Using loops with preallocation on a vector took:" )
print(system.time(loopy_sample2(popn, n, num)))

print("Using loops with preallocation on a list took:" )
print(system.time(loopy_sample3(popn, n, num)))

print("Using the vectorized sapply function (on a list) took:" )
print(system.time(sapply_sample(popn, n, num)))

print("Using the vectorized lapply function (on a list) took:" )
print(system.time(lapply_sample(popn, n, num)))

**********************************************************************

Testing sample.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Using loops without preallocation on a vector took:"
   user  system elapsed 
  0.174   0.014   0.188 
[1] "Using loops with preallocation on a vector took:"
   user  system elapsed 
  0.117   0.000   0.117 
[1] "Using loops with preallocation on a list took:"
   user  system elapsed 
  0.117   0.000   0.117 
[1] "Using the vectorized sapply function (on a list) took:"
   user  system elapsed 
  0.117   0.000   0.117 
[1] "Using the vectorized lapply function (on a list) took:"
   user  syst
**********************************************************************

Code ran without errors

Time consumed = 0.83037s

======================================================================
Inspecting script file R_conditionals.R...

File contents are:

**********************************************************************
# Checks if an integer is even
is.even <- function(n = 2) {
  if (n %% 2 == 0) {
    return(paste(n,'is even!'))
  } else {
  return(paste(n,'is odd!'))
  }
}

is.even(6)

# Checks if a number is a power of 2
is.power2 <- function(n = 2) {
  if (log2(n) %% 1==0) {
    return(paste(n, 'is a power of 2!'))
  } else {
  return(paste(n,'is not a power of 2!'))
    }
}

is.power2(4)

# Checks if a number is prime
is.prime <- function(n) {
  if (n==0) {
    return(paste(n,'is a zero!'))
  } else if (n==1) {
    return(paste(n,'is just a unit!'))
  }
    
  ints <- 2:(n-1)
  
  if (all(n%%ints!=0)) {
    return(paste(n,'is a prime!'))
  } else {
  return(paste(n,'is a composite!'))
    }
}

is.prime(3)

**********************************************************************

Testing R_conditionals.R...

Output (only first 500 characters): 


**********************************************************************
[1] "6 is even!"
[1] "4 is a power of 2!"
[1] "3 is a prime!"

**********************************************************************

Code ran without errors

Time consumed = 0.09260s

======================================================================
Inspecting script file apply1.R...

File contents are:

**********************************************************************
## Build a random matrix
M <- matrix(rnorm(100), 10, 10)

## Take the mean of each row
RowMeans <- apply(M, 1, mean)
print (RowMeans)

## Now the variance
RowVars <- apply(M, 1, var)
print (RowVars)

## By column
ColMeans <- apply(M, 2, mean)
print (ColMeans)

**********************************************************************

Testing apply1.R...

Output (only first 500 characters): 


**********************************************************************
 [1] -0.32892046 -0.15911159 -0.58624443 -0.36218505  0.29881627 -0.05556169
 [7] -0.17780721 -0.69002191  0.65292171  0.05716980
 [1] 0.1940029 1.1306887 0.8290189 1.9588984 0.7307009 0.9796989 0.9286093
 [8] 1.7446115 1.2753476 0.4361264
 [1] -0.25226440  0.25551677 -0.58293715 -0.37279773 -0.29455284 -0.36815887
 [7] -0.23636079 -0.08252457  0.08747584  0.49565922

**********************************************************************

Code ran without errors

Time consumed = 0.09367s

======================================================================
Inspecting script file basic_io.R...

File contents are:

**********************************************************************
# A simple script to illustrate R input-output.  
# Run line by line and check inputs outputs to understand what is happening  

MyData <- read.csv("../data/trees.csv", header = TRUE) # import with headers

write.csv(MyData, "../results/MyData.csv") #write it out as a new file

write.table(MyData[1,], file = "../results/MyData.csv",append=TRUE) # Append to it

write.csv(MyData, "../results/MyData.csv", row.names=TRUE) # write row names

write.table(MyData, "../results/MyData.csv", col.names=FALSE) # ignore column names

**********************************************************************

Testing basic_io.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Warning message:
In write.table(MyData[1, ], file = "../results/MyData.csv", append = TRUE) :
  appending column names to file

======================================================================
Inspecting script file SQLinR.R...

File contents are:

**********************************************************************
#install the sqlite package
install.packages('sqldf')

# To load the packages
library(sqldf)

# The command below opens a connection to the database.
#If the database does not yet exist, one is created in the working directory of R.
db <- dbConnect(SQLite(), dbname='Test.sqlite')

# Now let's enter some data to the table
# Using the db connection to our database, the data are entered using SQL queries
# The next command just create the table
dbSendQuery(conn = db,
            "CREATE TABLE Consumer
       (OriginalID TEXT,
        ConKingdom TEXT,
        ConPhylum TEXT,
        ConSpecies TEXT)")

# Once the table is created, we can enter the data.
#INSERT specifies where the data is entered (here the School table).
#VALUES contains the data

 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (1, 'Animalia', 'Arthropoda', 'Chaoborus trivittatus')")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (2, 'Animalia', 'Arthropoda', 'Chaoborus americanus')")
 dbSendQuery(conn = db,
         "INSERT INTO Consumer
         VALUES (3, 'Animalia', 'Chordata', 'Stizostedion vitreum')")


# Once we have our table, we can query the results using:

dbGetQuery(db, "SELECT * FROM Consumer")
dbGetQuery(db, "SELECT * FROM Consumer WHERE ConPhylum='Chordata'")


# Tables can be also imported from csv files.
# As example, let's use the Biotraits dataset.
# The easiest way is to read the csv files into R as data frames.
# Then the data frames are imported into the database.

Resource <- read.csv("../Data/Resource.csv")  # Read csv files into R

# Import data frames into database
 dbWriteTable(conn = db, name = "Resource", value = Resource, row.names = FALSE)

# Check that the data have been correctly imported into the School table.
 dbListTables(db)                 # The tables in the database
 dbListFields(db,"Resource")       # The columns in a table
 dbReadTable(db, "Resource")    # The data in a table

# Before leaving RSQLite, there is a bit of tidying-up to do.
# The connection to the database is closed, and as precaution
# the three data frames are removed from R’s environment.
 dbDisconnect(db)            # Close connection
 rm(list = c("Resource"))   # Remove data frames



**********************************************************************

Testing SQLinR.R...

Output (only first 500 characters): 


**********************************************************************
<SQLiteResult>
  SQL  CREATE TABLE Consumer
       (OriginalID TEXT,
        ConKingdom TEXT,
        ConPhylum TEXT,
        ConSpecies TEXT)
  ROWS Fetched: 0 [complete]
       Changed: 0
<SQLiteResult>
  SQL  INSERT INTO Consumer
         VALUES (1, 'Animalia', 'Arthropoda', 'Chaoborus trivittatus')
  ROWS Fetched: 0 [complete]
       Changed: 1
<SQLiteResult>
  SQL  INSERT INTO Consumer
         VALUES (2, 'Animalia', 'Arthropoda', 'Chaoborus americanus')
  ROWS Fetched: 0 [complete]
       C
**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Installing package into ‘/home/mhasoba/R/x86_64-pc-linux-gnu-library/4.1’
(as ‘lib’ is unspecified)
trying URL 'https://cloud.r-project.org/src/contrib/sqldf_0.4-11.tar.gz'
Content type 'application/x-gzip' length 63097 bytes (61 KB)
==================================================
downloaded 61 KB

* installing *source* package ‘sqldf’ ...
** package ‘sqldf’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (sqldf)

The downloaded source packages are in
	‘/tmp/RtmpiCoiHv/downloaded_packages’
Loading required package: gsubfn
Loading required package: proto
Loading required package: RSQLite
Warning message:
Closing open result set, pending rows 
Warning message:
Closing open result set, pending rows 
Warning message:
Closing open result set, pending rows 
Warning message:
Closing open result set, pending rows 
Error in file(file, "rt") : cannot open the connection
Calls: read.csv -> read.table -> file
In addition: Warning message:
In file(file, "rt") :
  cannot open file '../Data/Resource.csv': No such file or directory
Execution halted

======================================================================
Inspecting script file Girko.R...

File contents are:

**********************************************************************
# Loading required packages
library(ggplot2)

build_ellipse <- function(hradius, vradius){ # function that returns an ellipse
  npoints = 250
  a <- seq(0, 2 * pi, length = npoints + 1)
  x <- hradius * cos(a)
  y <- vradius * sin(a)  
  return(data.frame(x = x, y = y))
}

N <- 250 # Assign size of the matrix

M <- matrix(rnorm(N * N), N, N) # Build the matrix

eigvals <- eigen(M)$values # Find the eigenvalues

eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals)) # Build a dataframe

my_radius <- sqrt(N) # The radius of the circle is sqrt(N)

ellDF <- build_ellipse(my_radius, my_radius) # Dataframe to plot the ellipse

names(ellDF) <- c("Real", "Imaginary") # rename the columns

# plot the eigenvalues
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
  geom_point(shape = I(3)) +
  theme(legend.position = "none")

# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))

# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
p

ggsave("Girko.pdf", plot = p)
**********************************************************************

Testing Girko.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Saving 7 x 7 in image

======================================================================
Inspecting script file boilerplate.R...

File contents are:

**********************************************************************
# A boilerplate R script

MyFunction <- function(Arg1, Arg2) {
  
  # Statements involving Arg1, Arg2:
  print(paste("Argument", as.character(Arg1), "is a", class(Arg1))) # print Arg1's type
  print(paste("Argument", as.character(Arg2), "is a", class(Arg2))) # print Arg2's type
    
  return (c(Arg1, Arg2)) #this is optional, but very useful
}

MyFunction(1,2) #test the function
MyFunction("Riki","Tiki") #A different test

**********************************************************************

Testing boilerplate.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Argument 1 is a numeric"
[1] "Argument 2 is a numeric"
[1] 1 2
[1] "Argument Riki is a character"
[1] "Argument Tiki is a character"
[1] "Riki" "Tiki"

**********************************************************************

Code ran without errors

Time consumed = 0.10236s

======================================================================
Inspecting script file apply2.R...

File contents are:

**********************************************************************
SomeOperation <- function(v) { # (What does this function do?)
  if (sum(v) > 0) { #note that sum(v) is a single (scalar) value
    return (v * 100)
  } else { 
  return (v)
    }
}

M <- matrix(rnorm(100), 10, 10)
print (apply(M, 1, SomeOperation))

**********************************************************************

Testing apply2.R...

Output (only first 500 characters): 


**********************************************************************
             [,1]        [,2]       [,3]       [,4]       [,5]       [,6]
 [1,]  231.814072  -77.986447 -0.8257371   9.075745  0.4444913  -57.21603
 [2,]   81.148493 -105.584803 -1.1636968 -63.360815 -0.6452130  234.98222
 [3,]  238.717977   64.406810 -0.5089543  78.980460 -0.3706609  -40.34678
 [4,] -126.209156  124.739875 -0.5906090 146.275381 -0.8055501 -111.31520
 [5,]  -53.447103  215.016473 -0.9428264 104.342418  1.4153616    3.34525
 [6,]  119.734961    9.513943  1.7507759 -79.328721  0.79
**********************************************************************

Code ran without errors

Time consumed = 0.11174s

======================================================================
Inspecting script file DataWrang.R...

File contents are:

**********************************************************************
################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################

############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))

# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

############# Inspect the dataset ###############
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) #you can also do this
fix(MyMetaData)

############# Transpose ###############
# To get those species into columns and treatments into rows 
MyData <- t(MyData) 
head(MyData)
dim(MyData)

############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0

############# Convert raw matrix to data frame ###############

TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data

############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package

?melt #check out the melt function

MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")

MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])

str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)

############# Exploring the data (extend the script below)  ###############

**********************************************************************

Testing DataWrang.R...

Output (only first 500 characters): 


**********************************************************************
     V1                     V2        V3        V4        V5        V6       
[1,] "Cultivation"          "october" "october" "october" "october" "october"
[2,] "Block"                "a"       "a"       "a"       "a"       "a"      
[3,] "Plot"                 "1"       "1"       "1"       "1"       "1"      
[4,] "Quadrat"              "Q1"      "Q2"      "Q3"      "Q4"      "Q5"     
[5,] "Achillea millefolium" "4"       "8"       "3"       "20"      "6"      
[6,] "Agrostis gigantea"    ""   
**********************************************************************

Code ran without errors

Time consumed = 10.00837s

======================================================================
Inspecting script file try.R...

File contents are:

**********************************************************************
doit <- function(x) {
    temp_x <- sample(x, replace = TRUE)
    if(length(unique(temp_x)) > 30) {#only take mean if sample was sufficient
         print(paste("Mean of this sample was:", as.character(mean(temp_x))))
        } 
    else {
        stop("Couldn't calculate mean: too few unique values!")
        }
    }

set.seed(1345) # again, to get the same result for illustration

popn <- rnorm(50)

hist(popn)

lapply(1:15, function(i) doit(popn))

result <- lapply(1:15, function(i) try(doit(popn), FALSE))

class(result)

result <- vector("list", 15) #Preallocate/Initialize
for(i in 1:15) {
    result[[i]] <- try(doit(popn), FALSE)
    }

**********************************************************************

Testing try.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Mean of this sample was: -0.11620822588674"
[1] "Mean of this sample was: -0.0468516755995931"
[1] "Mean of this sample was: -0.0890228211466614"
[1] "Mean of this sample was: -0.124229742255296"

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Error in doit(popn) : Couldn't calculate mean: too few unique values!
Calls: lapply -> FUN -> doit
Execution halted

======================================================================
Inspecting script file MyFirstJupyterNb.ipynb...

File contents are:

**********************************************************************
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "08e8df50",
   "metadata": {},
   "source": [
    "$$\n",
    "    \\frac{dN}{dt} = rN \\left( 1-\\frac{N}{K}\\right)\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "512ab5d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is python!\n"
     ]
    }
   ],
   "source": [
    "a = \"this is python!\"; print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2cd453f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is R!"
     ]
    }
   ],
   "source": [
    "a <- \"this is R!\"; cat(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6bbf3d2d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19443/799143421.py:4: DeprecationWarning: scipy.arange is deprecated and will be removed in SciPy 2.0.0, use numpy.arange instead\n",
      "  x = sc.arange(0, 5, 0.1); y = sc.sin(x)\n",
      "/tmp/ipykernel_19443/799143421.py:4: DeprecationWarning: scipy.sin is deprecated and will be removed in SciPy 2.0.0, use numpy.sin instead\n",
      "  x = sc.arange(0, 5, 0.1); y = sc.sin(x)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as p\n",
    "import scipy as sc\n",
    "\n",
    "x = sc.arange(0, 5, 0.1); y = sc.sin(x)\n",
    "p.plot(x, y); p.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1b4a649b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loading required package: ggplot2\n",
      "\n",
      "Warning message:\n",
      "“\u001b[1m\u001b[22m`qplot()` was deprecated in ggplot2 3.4.0.”\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 150,
       "width": 198
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "require(ggplot2)\n",
    "library(repr) # to resize within jupyter - this package is part of IRKernel\n",
    "options(repr.plot.width=3.3,repr.plot.height=2.5)\n",
    "\n",
    "x <- seq(0, 5, 0.1); y <- sin(x)\n",
    "qplot(x, y, geom = \"line\") # large figure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a473bb2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "4.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

**********************************************************************

Testing MyFirstJupyterNb.ipynb...

======================================================================
Inspecting script file control_flow.R...

File contents are:

**********************************************************************
a <- TRUE
if (a == TRUE) {
    print ("a is TRUE")
} else {
    print ("a is FALSE")
}

**********************************************************************

Testing control_flow.R...

Output (only first 500 characters): 


**********************************************************************
[1] "a is TRUE"

**********************************************************************

Code ran without errors

Time consumed = 0.11004s

======================================================================
Inspecting script file MyBars.R...

File contents are:

**********************************************************************
# Load ggplot
library(ggplot2)

# Plotting code
a <- read.table("../data/Results.txt", header = TRUE)
a$ymin <- rep(0, dim(a)[1]) # append a column of zeros

# Print the first linerange
p <- ggplot(a)
p <- p + geom_linerange(data = a, aes(
    x = x,
    ymin = ymin,
    ymax = y1,
    size = (0.5)
),
colour = "#E69F00",
alpha = 1/2, show.legend = FALSE)

# Print the second linerange
p <- p + geom_linerange(data = a, aes(
    x = x,
    ymin = ymin,
    ymax = y2,
    size = (0.5)
),
colour = "#56B4E9",
alpha = 1/2, show.legend = FALSE)

# Print the third linerange:
p <- p + geom_linerange(data = a, aes(
    x = x,
    ymin = ymin,
    ymax = y3,
    size = (0.5)
),
colour = "#D55E00",
alpha = 1/2, show.legend = FALSE)

# Annotate the plot with labels:
p <- p + geom_text(data = a, aes(x = x, y = -500, label = Label))

# Set axis labels, remove the legend, and apply bw theme
p <- p + scale_x_continuous("My x axis",
                            breaks = seq(3, 5, by = 0.05)) + 
    scale_y_continuous("My y axis") + 
    theme_bw() + 
    theme(legend.position = "none")

# Save the plot as a PDF
ggsave("MyBars.pdf", plot = p)

**********************************************************************

Testing MyBars.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Warning message:
Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.
ℹ Please use `linewidth` instead. 
Saving 7 x 7 in image
Warning message:
Removed 91 rows containing missing values or values outside the scale range
(`geom_text()`). 

======================================================================
Inspecting script file TreeHeight.R...

File contents are:

**********************************************************************
# This function calculates heights of trees given distance of each tree 
# from its base and angle to its top, using  the trigonometric formula 
#
# height = distance * tan(radians)
#
# ARGUMENTS
# degrees:   The angle of elevation of tree
# distance:  The distance from base of tree (e.g., meters)
#
# OUTPUT
# The heights of the tree, same units as "distance"
setwd("../data")

TreeHeight <- function(angle, dist) {
    radians <- angle * pi / 180
    height <- dist * tan(radians)
    print(paste("Tree height is:", height))
  
    return (height)
}

tree_data <- read.csv("trees.csv")

tree_heights <- numeric(nrow(tree_data))

for (i in 1:nrow(tree_data)) {
	angle <- tree_data$Angle.degrees[i]
	dist <- tree_data$Distance.m[i]
	tree_heights[i] <- TreeHeight(angle, dist)
}

tree_data$Tree.Height.m <- tree_heights

write.csv(tree_data, "../results/TreeHts.csv", row.names = FALSE)



**********************************************************************

Testing TreeHeight.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Tree height is: 27.8021161438536"
[1] "Tree height is: 45.2460250644405"
[1] "Tree height is: 14.6654828109493"
[1] "Tree height is: 14.9341751666304"
[1] "Tree height is: 35.9703591412599"
[1] "Tree height is: 32.4102133664874"
[1] "Tree height is: 17.4582436344144"
[1] "Tree height is: 30.1373803987097"
[1] "Tree height is: 20.3124778877177"
[1] "Tree height is: 24.4316633466933"
[1] "Tree height is: 27.5021323376702"
[1] "Tree height is: 25.1559006982628"
[1] "Tree height is: 29.392479642
**********************************************************************

Code ran without errors

Time consumed = 0.10734s

======================================================================
Inspecting script file Vectorize.R...

File contents are:

**********************************************************************
M <- matrix(runif(1000000),1000,1000)

SumAllElements <- function(M) {
  Dimensions <- dim(M)
  Tot <- 0
  for (i in 1:Dimensions[1]) {
    for (j in 1:Dimensions[2]) {
      Tot <- Tot + M[i,j]
    }
  }
  return (Tot)
}
 
print("Using loops, the time taken is:")
print(system.time(SumAllElements(M)))

print("Using the in-built vectorized function, the time taken is:")
print(system.time(sum(M)))

**********************************************************************

Testing Vectorize.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Using loops, the time taken is:"
   user  system elapsed 
  0.032   0.000   0.032 
[1] "Using the in-built vectorized function, the time taken is:"
   user  system elapsed 
  0.001   0.000   0.001 

**********************************************************************

Code ran without errors

Time consumed = 0.15548s

======================================================================
Inspecting script file TestR.py...

File contents are:

**********************************************************************
import subprocess
p = subprocess.Popen("Rscript --verbose TestR.R > ../results/TestR.Rout 2> ../results/TestR_errFile.Rout", shell=True).wait()

**********************************************************************

Testing TestR.py...

TestR.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.10256s

======================================================================
Inspecting script file TestR.R...

File contents are:

**********************************************************************
print("Hello, this is R!")

**********************************************************************

Testing TestR.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Hello, this is R!"

**********************************************************************

Code ran without errors

Time consumed = 0.08796s

======================================================================
Inspecting script file plotLin.R...

File contents are:

**********************************************************************
# Loading required packages
library(ggplot2)

# create the data
x <- seq(0, 100, by = 0.1)
y <- -4. + 0.25 * x +
  rnorm(length(x), mean = 0., sd = 2.5)

# and put them in a dataframe
my_data <- data.frame(x = x, y = y)

# perform a linear regression
my_lm <- summary(lm(y ~ x, data = my_data))

# plot the data
p <-  ggplot(my_data, aes(x = x, y = y,
                          colour = abs(my_lm$residual))
) +
  geom_point() +
  scale_colour_gradient(low = "black", high = "red") +
  theme(legend.position = "none") +
  scale_x_continuous(
    expression(alpha^2 * pi / beta * sqrt(Theta)))

# add the regression line
p <- p + geom_abline(
  intercept = my_lm$coefficients[1][1],
  slope = my_lm$coefficients[2][1],
  colour = "red")
# throw some math on the plot
p <- p + geom_text(aes(x = 60, y = 0,
                       label = "sqrt(alpha) * 2* pi"), 
                   parse = TRUE, size = 6, 
                   colour = "blue")

p

ggsave("MyLinReg.pdf", plot = p)
**********************************************************************

Testing plotLin.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Warning message:
In geom_text(aes(x = 60, y = 0, label = "sqrt(alpha) * 2* pi"),  :
  All aesthetics have length 1, but the data has 1001 rows.
ℹ Please consider using `annotate()` or provide this layer with data containing
  a single row.
Saving 7 x 7 in image
Warning message:
In geom_text(aes(x = 60, y = 0, label = "sqrt(alpha) * 2* pi"),  :
  All aesthetics have length 1, but the data has 1001 rows.
ℹ Please consider using `annotate()` or provide this layer with data containing
  a single row.

======================================================================
Inspecting script file next.R...

File contents are:

**********************************************************************
for (i in 1:10) {
  if ((i %% 2) == 0) # check if the number is odd
    next # pass to next iteration of loop 
  print(i)
}

**********************************************************************

Testing next.R...

Output (only first 500 characters): 


**********************************************************************
[1] 1
[1] 3
[1] 5
[1] 7
[1] 9

**********************************************************************

Code ran without errors

Time consumed = 0.10118s

======================================================================
Inspecting script file browse.R...

File contents are:

**********************************************************************
Exponential <- function(N0 = 1, r = 1, generations = 10) {
  # Runs a simulation of exponential growth
  # Returns a vector of length generations
  
  N <- rep(NA, generations)    # Creates a vector of NA
  
  N[1] <- N0
  for (t in 2:generations) {
    N[t] <- N[t-1] * exp(r)
    browser()
  }
  return (N)
}

plot(Exponential(), type="l", main="Exponential growth")

**********************************************************************

Testing browse.R...

Output (only first 500 characters): 


**********************************************************************
Called from: Exponential()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()
debug: N[t] <- N[t - 1] * exp(r)
debug: browser()

**********************************************************************

Code ran without errors

Time consumed = 0.11732s

======================================================================
Inspecting script file preallocate.R...

File contents are:

**********************************************************************
NoPreallocFun <- function(x) {
    a <- vector() # empty vector
    for (i in 1:x) {
        a <- c(a, i) # concatenate
    }
}

system.time(NoPreallocFun(1000))

PreallocFun <- function(x) {
    a <- rep(NA, x) # pre-allocated vector
    for (i in 1:x) {
        a[i] <- i # assign
    }
}

system.time(PreallocFun(1000))

**********************************************************************

Testing preallocate.R...

Output (only first 500 characters): 


**********************************************************************
   user  system elapsed 
  0.007   0.002   0.009 
   user  system elapsed 
  0.002   0.000   0.002 

**********************************************************************

Code ran without errors

Time consumed = 0.12289s

======================================================================
Inspecting script file MyFirstJupyterNb-checkpoint.ipynb...

File contents are:

**********************************************************************
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "08e8df50",
   "metadata": {},
   "source": [
    "$$\n",
    "    \\frac{dN}{dt} = rN \\left( 1-\\frac{N}{K}\\right)\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "512ab5d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is python!\n"
     ]
    }
   ],
   "source": [
    "a = \"this is python!\"; print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2cd453f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is R!"
     ]
    }
   ],
   "source": [
    "a <- \"this is R!\"; cat(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6bbf3d2d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_19443/799143421.py:4: DeprecationWarning: scipy.arange is deprecated and will be removed in SciPy 2.0.0, use numpy.arange instead\n",
      "  x = sc.arange(0, 5, 0.1); y = sc.sin(x)\n",
      "/tmp/ipykernel_19443/799143421.py:4: DeprecationWarning: scipy.sin is deprecated and will be removed in SciPy 2.0.0, use numpy.sin instead\n",
      "  x = sc.arange(0, 5, 0.1); y = sc.sin(x)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as p\n",
    "import scipy as sc\n",
    "\n",
    "x = sc.arange(0, 5, 0.1); y = sc.sin(x)\n",
    "p.plot(x, y); p.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1b4a649b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loading required package: ggplot2\n",
      "\n",
      "Warning message:\n",
      "“\u001b[1m\u001b[22m`qplot()` was deprecated in ggplot2 3.4.0.”\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 150,
       "width": 198
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "require(ggplot2)\n",
    "library(repr) # to resize within jupyter - this package is part of IRKernel\n",
    "options(repr.plot.width=3.3,repr.plot.height=2.5)\n",
    "\n",
    "x <- seq(0, 5, 0.1); y <- sin(x)\n",
    "qplot(x, y, geom = \"line\") # large figure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9a473bb2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "4.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

**********************************************************************

Testing MyFirstJupyterNb-checkpoint.ipynb...

======================================================================
======================================================================
Finished running scripts

Ran into 6 errors

======================================================================
======================================================================

FINISHED LOGGING

