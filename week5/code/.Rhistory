View(avg_scores)
no_nas_girth <- read.csv("cleaned_data_no_na_girth.csv", header = TRUE)
no_nas_girth$Score <- gsub("[<>]", "", no_nas_girth$Score)
no_nas_girth <- no_nas_girth[!grepl("\\$", no_nas_girth$Score), ]
no_nas_girth <- no_nas_girth[!grepl("[789]", no_nas_girth$Score), ]
no_nas_girth <- no_nas_girth %>%
mutate(Score = as.numeric(Score))
View(no_nas_girth)
year_counts <- table(no_nas_girth$Year)
most_common_year <- names(year_counts[year_counts == max(year_counts)])
year_counts <- table(no_nas_girth$Year)
print(year_counts)
twennythirteen <- subset(no_nas_girth, Year == 2013)
write.csv(twennythirteen, "data_2013", row.names = FALSE)
View(twennythirteen)
lm_model1 <- lm(Score ~ Girth_cm, data = twennythirteen)
summary(lm_model1)
ggplot(avg_scores, aes(x = Girth_cm, y = Score)) +
geom_point() +  # Scatter plot of data points
geom_smooth(method = "lm", se = TRUE) +  # Linear model fit with confidence interval
labs(x = "Tree Girth (cm)", y = "Average Budburst Score",
title = "Relationship between Tree Girth and Budburst Score") +
theme_minimal()
install.packages("lubridate")
no_nas_girth$JulianDate <- yday(as.Date(no_nas_girth$Date, format = "%Y/%m/%d"))
library(lubridate)
no_nas_girth$JulianDate <- yday(as.Date(no_nas_girth$Date, format = "%Y/%m/%d"))
head(no_nas_girth)
no_nas_girth$JulianDate <- yday(as.Date(no_nas_girth$Date, format = "%Y-%m-%d"))
head(no_nas_girth)
write.csv(no_nas_girth, "Final_df.csv")
final <- read.csv("Final_df.csv". header = TRUE)
final <- read.csv("Final_df.csv" header = TRUE)
final <- read.csv("Final_df.csv", header = TRUE)
View(final)
lm_model1 <- lm(Girth_cm ~ JulianDate, data = final)
summary(lm_model1)
lm_model1 <- lm(Score ~ Girth_cm, data = final)
summary(lm_model1)
ggplot(final, aes(x = Girth_cm, y = Score)) +
geom_point() +  # Scatter plot of data points
geom_smooth(method = "lm", se = TRUE) +  # Linear model fit with confidence interval
labs(x = "Tree Girth (cm)", y = "Average Budburst Score",
title = "Relationship between Tree Girth and Budburst Score") +
theme_minimal()
library(ggplot2)
ggplot(final, aes(x = Girth_cm, y = Score)) +
geom_point() +  # Scatter plot of data points
geom_smooth(method = "lm", se = TRUE) +  # Linear model fit with confidence interval
labs(x = "Tree Girth (cm)", y = "Average Budburst Score",
title = "Relationship between Tree Girth and Budburst Score") +
theme_minimal()
ggplot(twennythirteen, aes(x = Girth_cm, y = Score)) +
geom_point() +  # Scatter plot of data points
geom_smooth(method = "lm", se = TRUE) +  # Linear model fit with confidence interval
labs(x = "Tree Girth (cm)", y = "Average Budburst Score",
title = "Relationship between Tree Girth and Budburst Score") +
theme_minimal()
lm_model1 <- lm(Score ~ Girth_cm, data = twennythirteen)
summary(lm_model1)
# Load necessary packages
library(dplyr)
# Find the first date each tree reaches a score of 1
first_budburst <- twennythirteen %>%
filter(Score == 1) %>%
group_by(TreeID) %>%
summarize(BudburstDate = min(Date))
# Join this new information back to the original dataframe
twennythirteen <- twennythirteen %>%
left_join(first_budburst, by = "TreeID")
# View the updated dataframe
head(twennythirteen)
# Load necessary packages
library(dplyr)
library(lubridate)
# Ensure Date is in the correct format
twennythirteen$Date <- as.Date(twennythirteen$Date, format = "%Y-%m-%d")
# Find the first date each tree reaches a score greater than 1
first_budburst <- twennythirteen %>%
filter(Score > 1) %>%
group_by(TreeID) %>%
summarize(BudburstDate = min(Date), .groups = "drop")
# Join this new information back to the original dataframe
twennythirteen <- twennythirteen %>%
left_join(first_budburst, by = "TreeID")
# View the updated dataframe
head(twennythirteen)
twennythirteen <- subset(no_nas_girth, Year == 2013)
library(lubridate)
twennythirteen <- subset(no_nas_girth, Year == 2013)
twennythirteen <- subset(no_nas_girth, Year == 2013)
library(lubridate)
twennythirteen$JulianDate <- yday(as.Date(twennythirteen$Date, format = "%Y-%m-%d"))
# Load necessary packages
library(dplyr)
# Ensure Date is in the correct format
twennythirteen$Date <- as.Date(twennythirteen$Date, format = "%Y-%m-%d")
# Find the first date each tree reaches a score greater than 1
first_budburst <- twennythirteen %>%
filter(Score > 1) %>%
group_by(TreeID) %>%
summarize(BudburstDate = min(Date), .groups = "drop")
# Join this new information back to the original dataframe
twennythirteen <- twennythirteen %>%
left_join(first_budburst, by = "TreeID")
# View the updated dataframe
head(twennythirteen)
twennythirteen$JulianDate <- yday(as.Date(twennythirteen$BudburstDate, format = "%Y-%m-%d"))
head(twennythirteen)
lm_model1 <- lm(JulianDate ~ Girth_cm, data = twennythirteen)
summary(lm_model1)
ggplot(twennythirteen, aes(x = Girth_cm, y = JulianDate)) +
geom_point() +  # Scatter plot of data points
geom_smooth(method = "lm", se = TRUE) +  # Linear model fit with confidence interval
labs(x = "Tree Girth (cm)", y = "First Budburst Day",
title = "Relationship between Tree Girth and Budburst Start") +
theme_minimal()
hist(twennythirteen$Girth_cm)
hist(twennythirteen$JulianDate)
hist(twennythirteen$Girth_cm)
anova(lm_model1)
# Required packages
require(tidyverse)
require(lubridate)
require(MASS)
# Read in main data files
phen <- read.csv("../data/phenology.csv")
girth <- read.csv("../data/girth.csv")
# Convert both tree IDs to characters
phen <- phen %>%
mutate(TreeID = as.character(TreeID))
girth <- girth %>%
mutate(TreeID = as.character(TreeID))
# Combining both files
girth_phen <- girth %>%
inner_join(phen, by = "TreeID", relationship = "many-to-many")
girth_phen <- read.csv("combined_files.csv", header = T, row.names = NULL)
# Convert Date.y to a date format and extract the year to find year with largest sample size
year_counts <- girth_phen %>%
mutate(Year = year(dmy(Date.y))) %>%  # Convert to date and extract year
count(Year) %>%                       # Count occurrences of each year
arrange(desc(n))                      # Arrange in descending order
year_counts # its 2013!
# Now removing columns that are irrelevant and cleaning up the file a bit
# Removing columns
girth_phen <- girth_phen %>%
select(-X, -VisitID, -Stems, -HeightGirth_cm, -Estimated, -TreeForm, -remarks)
# Cleaning up Score column, and rounding "greater than" (>) up, and "less than" (<) down
girth_phen$Score <- gsub("[<>]", "", girth_phen$Score)
girth_phen <- girth_phen[!grepl("\\$", girth_phen$Score), ]
girth_phen <- girth_phen[!grepl("[789]", girth_phen$Score), ]
# Removing all rows that aren't in 2013
# Date.y
girth_phen <- girth_phen %>%
mutate(Year = year(dmy(Date.y))) %>% # Convert Date.y to date and extract year
filter(Year == 2013) %>% # Keeps rows where date is 2013
select(-Year) # Removes the new "year" column that we extracted
data <- read.csv("wrangled_girth_phen.csv", header = T, row.names = NULL)
# Histogram of logged response variable, looks gaussian!
hist(log(data$JulianDate))
# Plotting the glm
ggplot(data, aes(x = Girth_cm, y = log(JulianDate))) +
geom_point() +
geom_smooth(method = "glm", se = TRUE) +
labs(
x = "Tree Girth (cm)",
y = "Log Budburst Day (Julian Days)",
title = "Relationship between Tree Girth and Budburst"
) +
theme_minimal()
# Making the glm
glm_model <- glm(log(JulianDate) ~ Girth_cm, family = "gaussian", data = data)
summary(glm_model)
any(duplicated(data$TreeID))
mean(data$JulianDate)
View(girth_phen)
median(data$JulianDate)
mode(data$Girth_cm)
mode(data$JulianDate)
# Calculate the mode of a numeric vector
get_mode <- function(v) {
uniq_vals <- unique(v)
uniq_vals[which.max(tabulate(match(v, uniq_vals)))]
}
# Apply the function to your JulianDate column
mode_JulianDate <- get_mode(data$JulianDate)
mode_JulianDate
View(girth_phen)
mean(data$Girth_cm)
median(data$Girth_cm)
# Calculate the mode of the Girth_cm column
get_mode <- function(v) {
uniq_vals <- unique(v)
uniq_vals[which.max(tabulate(match(v, uniq_vals)))]
}
# Apply the function to your Girth_cm column
mode_Girth_cm <- get_mode(data$Girth_cm)
mode_Girth_cm
# Read in main data files
phen <- read.csv("../data/phenology.csv")
girth <- read.csv("../data/girth.csv")
# Convert both tree IDs to characters
phen <- phen %>%
mutate(TreeID = as.character(TreeID))
girth <- girth %>%
mutate(TreeID = as.character(TreeID))
# Combining both files
girth_phen <- girth %>%
inner_join(phen, by = "TreeID", relationship = "many-to-many")
girth_phen <- read.csv("combined_files.csv", header = T, row.names = NULL)
# Convert Date.y to a date format and extract the year to find year with largest sample size
year_counts <- girth_phen %>%
mutate(Year = year(dmy(Date.y))) %>%  # Convert to date and extract year
count(Year) %>%                       # Count occurrences of each year
arrange(desc(n))                      # Arrange in descending order
year_counts # its 2013!
View(girth_phen)
# Now removing columns that are irrelevant and cleaning up the file a bit
# Removing columns
girth_phen <- girth_phen %>%
select(-X, -VisitID, -Stems, -HeightGirth_cm, -Estimated, -TreeForm, -remarks)
library(dplyr)
# Now removing columns that are irrelevant and cleaning up the file a bit
# Removing columns
girth_phen <- girth_phen %>%
select(-X, -VisitID, -Stems, -HeightGirth_cm, -Estimated, -TreeForm, -remarks)
colnames(girth_phen)
View(girth)
View(phen)
girth_phen <- girth_phen %>%
dplyr::select(-X, -VisitID, -Stems, -HeightGirth_cm, -Estimated, -TreeForm, -remarks)
# Read in main data files
phen <- read.csv("../data/phenology.csv")
girth <- read.csv("../data/girth.csv")
# Convert both tree IDs to characters
phen <- phen %>%
mutate(TreeID = as.character(TreeID))
girth <- girth %>%
mutate(TreeID = as.character(TreeID))
# Combining both files
girth_phen <- girth %>%
inner_join(phen, by = "TreeID", relationship = "many-to-many")
girth_phen <- read.csv("combined_files.csv", header = T, row.names = NULL)
girth_phen <- girth_phen %>%
dplyr::select(-X, -VisitID, -Stems, -HeightGirth_cm, -Estimated, -TreeForm, -remarks)
# Cleaning up Score column, and rounding "greater than" (>) up, and "less than" (<) down
girth_phen$Score <- gsub("[<>]", "", girth_phen$Score)
girth_phen <- girth_phen[!grepl("\\$", girth_phen$Score), ]
girth_phen <- girth_phen[!grepl("[789]", girth_phen$Score), ]
# Removing all rows that aren't in 2013
# Date.y
girth_phen <- girth_phen %>%
mutate(Year = year(dmy(Date.y))) %>% # Convert Date.y to date and extract year
filter(Year == 2013) %>% # Keeps rows where date is 2013
select(-Year) # Removes the new "year" column that we extracted
# Removing all rows that aren't in 2013
# Date.y
girth_phen <- girth_phen %>%
mutate(Year = year(dmy(Date.y))) %>%  # Convert Date.y to date and extract year
filter(Year == 2013) %>%              # Keeps rows where date is 2013
dplyr::select(-Year)                  # Removes the new "Year" column explicitly using dplyr::select
# Date.x (much more complicated)
# Standardize Date.x to contain only years
girth_phen <- girth_phen %>%
mutate(Date.x = ifelse(grepl("/", Date.x), format(dmy(Date.x), "%Y"),  Date.x))
# Expand date ranges and filter for 2013
girth_phen <- girth_phen %>%
separate(Date.x, into = c("StartYear", "EndYear"), sep = "-", convert = TRUE, remove = FALSE) %>%  # Split Date.x into its constituent years, but keep Date.x as a column
mutate(EndYear = ifelse(is.na(EndYear), StartYear, EndYear)) %>%  # Handle single years
filter(StartYear <= 2013 & EndYear >= 2013) %>%  # Keep rows where 2013 is within the range
select(-StartYear, -EndYear)  # Remove temporary columns
install.packages("conflicted")
library(conflicted)
detach("package:MASS", unload = TRUE)
# Date.x (much more complicated)
# Standardize Date.x to contain only years
girth_phen <- girth_phen %>%
mutate(Date.x = ifelse(grepl("/", Date.x), format(dmy(Date.x), "%Y"),  Date.x))
# Expand date ranges and filter for 2013
girth_phen <- girth_phen %>%
separate(Date.x, into = c("StartYear", "EndYear"), sep = "-", convert = TRUE, remove = FALSE) %>%  # Split Date.x into its constituent years, but keep Date.x as a column
mutate(EndYear = ifelse(is.na(EndYear), StartYear, EndYear)) %>%  # Handle single years
filter(StartYear <= 2013 & EndYear >= 2013) %>%  # Keep rows where 2013 is within the range
select(-StartYear, -EndYear)  # Remove temporary columns
conflicted::conflicts_prefer(dplyr::filter)
# Expand date ranges and filter for 2013
girth_phen <- girth_phen %>%
separate(Date.x, into = c("StartYear", "EndYear"), sep = "-", convert = TRUE, remove = FALSE) %>%  # Split Date.x into its constituent years, but keep Date.x as a column
mutate(EndYear = ifelse(is.na(EndYear), StartYear, EndYear)) %>%  # Handle single years
filter(StartYear <= 2013 & EndYear >= 2013) %>%  # Keep rows where 2013 is within the range
select(-StartYear, -EndYear)  # Remove temporary columns
# If we want to manually check that the date ranges are correct we can do that now
# Once done, remove the unnecessary column Date.x
girth_phen <- girth_phen %>%
select(-Date.x)
# Now we are removing all rows that don't have a score of 1 (this is what we are interested in)
# Find the first date each tree has achieved 'budburst' (Score = 1)
first_budburst <- girth_phen %>%
filter(Score == 1) %>%
group_by(TreeID) %>%
summarize(BudburstDate = min(Date.y), .groups = "drop")
# Join this new information back to the 'girth_phen' data frame
girth_phen <- girth_phen %>%
left_join(first_budburst, by = "TreeID")
# Now remove all 'NA' values (including Trees that skipped a score of 1)
girth_phen <- girth_phen %>%
filter(!is.na(BudburstDate))
# Now converting the dates into Julian days (days since Jan. 1st)
girth_phen$JulianDate <- yday(as.Date(girth_phen$BudburstDate, format = "%d/%m/%Y"))
# Just cleaning up the data frame by removing all non-1 scores, and removing columns that are now irrelevant (this is optional)
girth_phen <- girth_phen %>%
filter(Score == 1)
girth_phen <- girth_phen %>%
select(-Date.y, -BudburstDate, -Score)
tree <- read.csv("../data/trees.csv", header = TRUE)
View(tree)
merged_data <- inner_join(tree, girth_phen, by = "TreeID")
View(merged_data)
# Standard deviation of JulianDate
sd(data$JulianDate)
# Standard deviation of Girth_cm
sd(data$Girth_cm)
hist(data$JulianDate)
# Customized histogram of JulianDate
hist(data$JulianDate,
col = "skyblue",            # Set bar color
border = "white",            # Set border color for bars
main = "Distribution of Julian Dates",   # Add a main title
xlab = "Julian Date",        # Label for x-axis
ylab = "Frequency",          # Label for y-axis
breaks = 20)                 # Set number of bins
# Customized histogram of JulianDate
hist(data$JulianDate,
col = "darkgreen",            # Set bar color
border = "black",            # Set border color for bars
main = "Distribution of Julian Dates",   # Add a main title
xlab = "Julian Date",        # Label for x-axis
ylab = "Frequency",          # Label for y-axis
breaks = 20)                 # Set number of bins
# Customized histogram of JulianDate
hist(data$JulianDate,
col = "darkgreen",            # Set bar color
border = "black",            # Set border color for bars
main = "Distribution of Julian Dates",   # Add a main title
xlab = "Julian Date",        # Label for x-axis
ylab = "Frequency",          # Label for y-axis
breaks = 10)                 # Set number of bins
# Customized histogram of JulianDate
hist(data$JulianDate,
col = "darkgreen",            # Set bar color
border = "black",            # Set border color for bars
main = "Distribution of Julian Dates",   # Add a main title
xlab = "Julian Date",        # Label for x-axis
ylab = "Frequency",          # Label for y-axis
breaks = 7)                 # Set number of bins
# Customized histogram of JulianDate
hist(data$JulianDate,
col = "darkgreen",            # Set bar color
border = "black",            # Set border color for bars
main = "Distribution of Julian Dates",   # Add a main title
xlab = "Julian Date",        # Label for x-axis
ylab = "Frequency",          # Label for y-axis
breaks = 9)                 # Set number of bins
# Customized histogram of JulianDate
hist(data$JulianDate,
col = "darkgreen",            # Set bar color
border = "black",            # Set border color for bars
main = "Distribution of initial Budburst Dates",   # Add a main title
xlab = "Julian Date",        # Label for x-axis
ylab = "Frequency",          # Label for y-axis
breaks = 9)                 # Set number of bins
# Customized histogram of JulianDate
hist(data$JulianDate,
col = "darkgreen",            # Set bar color
border = "black",            # Set border color for bars
main = "Distribution of Initial Budburst Dates",   # Add a main title
xlab = "Julian Day",        # Label for x-axis
ylab = "Frequency",          # Label for y-axis
breaks = 9)                 # Set number of bins
# Customized histogram of JulianDate
hist(log(data$JulianDate),
col = "darkgreen",            # Set bar color
border = "black",            # Set border color for bars
main = "Distribution of Initial Budburst Dates",   # Add a main title
xlab = "Log Julian Day",        # Label for x-axis
ylab = "Frequency",          # Label for y-axis
breaks = 9)                 # Set number of bins
# Customized histogram of JulianDate
hist(log(data$JulianDate),
col = "darkgreen",            # Set bar color
border = "black",            # Set border color for bars
main = "Distribution of Initial Budburst Dates",   # Add a main title
xlab = "Log Julian Day",        # Label for x-axis
ylab = "Frequency",          # Label for y-axis
breaks = 10)                 # Set number of bins
# Customized histogram of JulianDate
hist(log(data$JulianDate),
col = "darkgreen",            # Set bar color
border = "black",            # Set border color for bars
main = "Distribution of Initial Budburst Dates",   # Add a main title
xlab = "Log Julian Day",        # Label for x-axis
ylab = "Frequency",          # Label for y-axis
breaks = 20)                 # Set number of bins
# Customized histogram of JulianDate
hist(log(data$JulianDate),
col = "darkgreen",            # Set bar color
border = "black",            # Set border color for bars
main = "Distribution of Initial Budburst Dates",   # Add a main title
xlab = "Log Julian Day",        # Label for x-axis
ylab = "Frequency",          # Label for y-axis
breaks = 5)                 # Set number of bins
# Customized histogram of JulianDate
hist(log(data$JulianDate),
col = "darkgreen",            # Set bar color
border = "black",            # Set border color for bars
main = "Distribution of Initial Budburst Dates",   # Add a main title
xlab = "Log Julian Day",        # Label for x-axis
ylab = "Frequency",          # Label for y-axis
breaks = 7)                 # Set number of bins
# Customized histogram of JulianDate
hist(log(data$JulianDate),
col = "darkgreen",            # Set bar color
border = "black",            # Set border color for bars
main = "Distribution of Initial Budburst Dates",   # Add a main title
xlab = "Log Julian Day",        # Label for x-axis
ylab = "Frequency",          # Label for y-axis
breaks = 9)                 # Set number of bins
# Customized histogram of JulianDate
hist(log(data$JulianDate),
col = "darkgreen",            # Set bar color
border = "black",            # Set border color for bars
main = "Log-Transformed Distribution of Initial Budburst Dates",   # Add a main title
xlab = "Log Julian Day",        # Label for x-axis
ylab = "Frequency",          # Label for y-axis
breaks = 9)                 # Set number of bins
# Customized histogram of JulianDate
hist(log(data$JulianDate),
col = "darkgreen",            # Set bar color
border = "black",            # Set border color for bars
xlab = "Log Julian Day",        # Label for x-axis
ylab = "Frequency",          # Label for y-axis
breaks = 9)                 # Set number of bins
# Plotting the glm
ggplot(data, aes(x = Girth_cm, y = log(JulianDate))) +
geom_point() +
geom_smooth(method = "glm", se = TRUE) +
labs(
x = "Tree Girth (cm)",
y = "Log Budburst Day (Julian Days)",
title = "Relationship between Tree Girth and Budburst"
) +
theme_minimal()
ggplot(data, aes(x = Girth_cm, y = log(JulianDate))) +
geom_point(color = "darkblue", shape = 16, alpha = 0.7, size = 2.5) +  # Customizes points
geom_smooth(method = "glm", se = TRUE, color = "darkred", fill = "lightpink", linetype = "dashed") +  # Customizes line and shaded area
labs(
x = "Tree Girth (cm)",
y = "Log Budburst Day (Julian Days)",
title = "Relationship between Tree Girth and Budburst"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),  # Centers and bolds title
axis.title = element_text(face = "bold"),  # Bolds axis titles
axis.text = element_text(color = "gray30")  # Adds color to axis text for better contrast
)
ggplot(data, aes(x = Girth_cm, y = log(JulianDate))) +
geom_point(color = "darkblue", shape = 16, alpha = 0.7, size = 2.5) +  # Customizes points
geom_smooth(method = "glm", se = TRUE, color = "darkred") +  # Customizes line and shaded area
labs(
x = "Tree Girth (cm)",
y = "Log Budburst Day (Julian Days)",
title = "Relationship between Tree Girth and Budburst"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),  # Centers and bolds title
axis.title = element_text(face = "bold"),  # Bolds axis titles
axis.text = element_text(color = "gray30")  # Adds color to axis text for better contrast
)
ggplot(data, aes(x = Girth_cm, y = log(JulianDate))) +
geom_point(color = "darkgreen", shape = 16, alpha = 0.7, size = 2.5) +  # Customizes points
geom_smooth(method = "glm", se = TRUE, color = "darkred") +  # Customizes line and shaded area
labs(
x = "Tree Girth (cm)",
y = "Log Budburst Day (Julian Days)",
title = "Relationship between Tree Girth and Budburst"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),  # Centers and bolds title
axis.title = element_text(face = "bold"),  # Bolds axis titles
axis.text = element_text(color = "gray30")  # Adds color to axis text for better contrast
)
ggplot(data, aes(x = Girth_cm, y = log(JulianDate))) +
geom_point(color = "darkgreen", shape = 16, alpha = 0.7, size = 2.5) +  # Customizes points
geom_smooth(method = "glm", se = TRUE, color = "black") +  # Customizes line and shaded area
labs(
x = "Tree Girth (cm)",
y = "Log Budburst Day (Julian Days)",
title = "Relationship between Tree Girth and Budburst"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),  # Centers and bolds title
axis.title = element_text(face = "bold"),  # Bolds axis titles
axis.text = element_text(color = "gray30")  # Adds color to axis text for better contrast
)
# Checking assumptions
par(mfrow=c(2,2))
plot(glm_model)
par(mfrow=c(1,1))
