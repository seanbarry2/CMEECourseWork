library(parallel)
n <- 10000
data <- data.frame(ID = sample(1:10, n, replace = TRUE), y = rnorm(n), x = rnorm(n))
library(dplyr)
data_groups <- data %>% group_by(ID) %>% group_split()
fit_model <- function(group_data) {}
fit_model <- function(group_data) {
model <- lm(y ~ X, data = group_data)
coef_df <- as.data.frame(t(coef(model)))
coef_df$ID <- unique(group_data$ID)  # Add ID for reference
return(coef_df)
}
num_cores <- detectCores() - 1
results <- mcapply(data_groups, fit_model, mc.cores = num_cores)
results <- mclapply(data_groups, fit_model, mc.cores = num_cores)
final_results <- bind_rows(results)
print(final_results)
n <- 10000   # Number of observations
data <- data.frame(
ID = sample(1:10, n, replace = TRUE),  # ID column to define 10 groups
y = rnorm(n),
X = rnorm(n)
)
library(dplyr)
data_groups <- data %>% group_by(ID) %>% group_split() # Split the data by ID
# Define a function to fit a linear model for each group
fit_model <- function(group_data) {
model <- lm(y ~ X, data = group_data)
coef_df <- as.data.frame(t(coef(model)))
coef_df$ID <- unique(group_data$ID)  # Add ID for reference
return(coef_df)
}
library(parallel)
num_cores <- detectCores() - 1 # Use all cores but one
results <- mclapply(data_groups, fit_model, mc.cores = num_cores) # Fit the models
final_results <- bind_rows(results) # Bind model outputs from list to table
print(final_results)
# 0
state_initialise_adult <- function(num_stages, initial_size) {
# Create a state vector with all individuals in the adult (final) life stage
state <- rep(0, num_stages)  # Initialize a vector of zeros with length num_stages
state[num_stages] <- initial_size  # Assign the initial_size to the final life stage
return(state)
}
state_initialise_spread <- function(num_stages, initial_size) {
# Calculate the base number of individuals per life stage
base_count <- floor(initial_size / num_stages)
# Determine the remaining individuals to distribute
remainder <- initial_size %% num_stages
# Create a state vector with the base count for each stage
state <- rep(base_count, num_stages)
# Distribute the remainder starting from the youngest life stage
if (remainder > 0) {
state[1:remainder] <- state[1:remainder] + 1
}
return(state)
}
state_initialise_spread(num_stages = 3, initial_size = 8)
state_initialise_adult(num_stages = 3, initial_size = 8)
state_initialise_adult(num_stages = 3, initial_size = 9)
state_initialise_adult(num_stages = 3, initial_size = 10)
state_initialise_adult(num_stages = 4, initial_size = 10)
state_initialise_adult(num_stages = 3, initial_size = 1)
updateR
library(installr)
install.packages("installr")
library(installr)
updateR
