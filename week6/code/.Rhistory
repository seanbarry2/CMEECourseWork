View(reproduction_matrix)
# Question 1
question_1 <- function(){
growth_matrix <- matrix(c(0.1, 0.0, 0.0, 0.0, 0.5, 0.4, 0.0, 0.0, 0.0, 0.4, 0.7, 0.0, 0.0, 0.0, 0.25, 0.4), nrow = 4, ncol = 4, byrow = TRUE)
reproduction_matrix <- matrix(c(0.0, 0.0, 0.0, 2.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), nrow = 4, ncol = 4, byrow = TRUE)
projection_matrix <- reproduction_matrix + growth_matrix
simulation_length <- 24
# starting condition 1
initial_state_adult <- state_initialise_adult(num_stages = 4, initial_size = 100)
# starting condition 2
initial_state_adult <- state_initialise_spread(num_stages = 4, initial_size = 100)
# run deterministic simulation
result_adult <- deterministic_simulation(initial_state_adult, projection_matrix, simulation_length)
result_spread <- deterministic_simulation(initial_state_spread, projection_matrix, simulation_length)
png(filename="question_1", width = 600, height = 400)
# plot your graph here
plot(result_adult, type = "l", col = "blue", lwd = 2, ylim = range(c(result_adult, result_spread)),
xlab = "Time Step", ylab = "Population Size", main = "Population Size Time Series")
lines(result_spread, col = "red", lwd = 2)
legend("topright", legend = c("100 Adults", "100 Spread"), col = c("blue", "red"), lwd = 2)
Sys.sleep(0.1)
dev.off()
return("type your written answer here")
}
projection_matrix <- reproduction_matrix + growth_matrix
View(projection_matrix)
simulation_length <- 24
# starting condition 1: 100 individuals in final life stage
initial_state_adult <- state_initialise_adult(num_stages = 4, initial_size = 100)
# starting condition 2: 100 individuals spread across life stages
initial_state_spread <- state_initialise_spread(num_stages = 4, initial_size = 100)
result_adult <- deterministic_simulation(initial_state_adult, projection_matrix, simulation_length)
result_spread <- deterministic_simulation(initial_state_spread, projection_matrix, simulation_length)
View(growth_matrix)
View(projection_matrix)
plot(result_adult, type = "l", col = "blue", lwd = 2, ylim = range(c(result_adult, result_spread)),
xlab = "Time Step", ylab = "Population Size", main = "Population Size Time Series")
lines(result_spread, col = "red", lwd = 2)
legend("topright", legend = c("100 Adults", "100 Spread"), col = c("blue", "red"), lwd = 2)
png(filename = "question_1.png", width = 600, height = 400)
png(filename = "question_1.png", width = 600, height = 400)
plot(result_adult, type = "l", col = "blue", lwd = 2, ylim = range(c(result_adult, result_spread)),
xlab = "Time Step", ylab = "Population Size", main = "Population Size Time Series")
lines(result_spread, col = "red", lwd = 2)
legend("topright", legend = c("100 Adults", "100 Spread"), col = c("blue", "red"), lwd = 2)
dev.off()
# Question 1
question_1 <- function(){
# define projection matrix
growth_matrix <- matrix(c(0.1, 0.0, 0.0, 0.0, 0.5, 0.4, 0.0, 0.0, 0.0, 0.4, 0.7, 0.0, 0.0, 0.0, 0.25, 0.4), nrow = 4, ncol = 4, byrow = TRUE)
reproduction_matrix <- matrix(c(0.0, 0.0, 0.0, 2.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), nrow = 4, ncol = 4, byrow = TRUE)
projection_matrix <- reproduction_matrix + growth_matrix
# define simulation length
simulation_length <- 24
# starting condition 1: 100 individuals in final life stage
initial_state_adult <- state_initialise_adult(num_stages = 4, initial_size = 100)
# starting condition 2: 100 individuals spread across life stages
initial_state_spread <- state_initialise_spread(num_stages = 4, initial_size = 100)
# run deterministic simulation
result_adult <- deterministic_simulation(initial_state_adult, projection_matrix, simulation_length)
result_spread <- deterministic_simulation(initial_state_spread, projection_matrix, simulation_length)
png(filename = "question_1.png", width = 600, height = 400)
plot(result_adult, type = "l", col = "blue", lwd = 2, ylim = range(c(result_adult, result_spread)),
xlab = "Time Step", ylab = "Population Size", main = "Population Size Time Series")
lines(result_spread, col = "red", lwd = 2)
legend("topright", legend = c("100 Adults", "100 Spread"), col = c("blue", "red"), lwd = 2)
dev.off()
return("type your written answer here")
}
question_1()
# Question 1
question_1 <- function(){
# define projection matrix
growth_matrix <- matrix(c(0.1, 0.0, 0.0, 0.0, 0.5, 0.4, 0.0, 0.0, 0.0, 0.4, 0.7, 0.0, 0.0, 0.0, 0.25, 0.4), nrow = 4, ncol = 4, byrow = TRUE)
reproduction_matrix <- matrix(c(0.0, 0.0, 0.0, 2.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), nrow = 4, ncol = 4, byrow = TRUE)
projection_matrix <- reproduction_matrix + growth_matrix
# define simulation length
simulation_length <- 24
# starting condition 1: 100 individuals in final life stage
initial_state_adult <- state_initialise_adult(num_stages = 4, initial_size = 100)
# starting condition 2: 100 individuals spread across life stages
initial_state_spread <- state_initialise_spread(num_stages = 4, initial_size = 100)
# run deterministic simulation
result_adult <- deterministic_simulation(initial_state_adult, projection_matrix, simulation_length)
result_spread <- deterministic_simulation(initial_state_spread, projection_matrix, simulation_length)
png(filename = "question_1.png", width = 600, height = 400)
plot(result_adult, type = "l", col = "blue", lwd = 2, ylim = range(c(result_adult, result_spread)),
xlab = "Time Step", ylab = "Population Size", main = "Population Size Time Series")
lines(result_spread, col = "red", lwd = 2)
legend("topright", legend = c("100 Adults", "100 Spread"), col = c("blue", "red"), lwd = 2)
dev.off()
return("The hundred adults start off with a burst in population followed by a crash and eventual stabilization. The spread population has a much smaller initial burst/crash and trails the hundred adults throughout. Burst, crash and stabilization occur around the same time.")
}
question_1()
# Question 1
question_1 <- function(){
# define projection matrix
growth_matrix <- matrix(c(0.1, 0.0, 0.0, 0.0, 0.5, 0.4, 0.0, 0.0, 0.0, 0.4, 0.7, 0.0, 0.0, 0.0, 0.25, 0.4), nrow = 4, ncol = 4, byrow = TRUE)
reproduction_matrix <- matrix(c(0.0, 0.0, 0.0, 2.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), nrow = 4, ncol = 4, byrow = TRUE)
projection_matrix <- reproduction_matrix + growth_matrix
# define simulation length
simulation_length <- 1000
# starting condition 1: 100 individuals in final life stage
initial_state_adult <- state_initialise_adult(num_stages = 4, initial_size = 100)
# starting condition 2: 100 individuals spread across life stages
initial_state_spread <- state_initialise_spread(num_stages = 4, initial_size = 100)
# run deterministic simulation
result_adult <- deterministic_simulation(initial_state_adult, projection_matrix, simulation_length)
result_spread <- deterministic_simulation(initial_state_spread, projection_matrix, simulation_length)
png(filename = "question_1.png", width = 600, height = 400)
plot(result_adult, type = "l", col = "blue", lwd = 2, ylim = range(c(result_adult, result_spread)),
xlab = "Time Step", ylab = "Population Size", main = "Population Size Time Series")
lines(result_spread, col = "red", lwd = 2)
legend("topright", legend = c("100 Adults", "100 Spread"), col = c("blue", "red"), lwd = 2)
dev.off()
return("The hundred adults start off with a burst in population followed by a crash and eventual stabilization. The spread population has a much smaller initial burst/crash and trails the hundred adults throughout. Burst, crash and stabilization occur around the same time.")
}
question_1()
# Question 1
question_1 <- function(){
# define projection matrix
growth_matrix <- matrix(c(0.1, 0.0, 0.0, 0.0, 0.5, 0.4, 0.0, 0.0, 0.0, 0.4, 0.7, 0.0, 0.0, 0.0, 0.25, 0.4), nrow = 4, ncol = 4, byrow = TRUE)
reproduction_matrix <- matrix(c(0.0, 0.0, 0.0, 2.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), nrow = 4, ncol = 4, byrow = TRUE)
projection_matrix <- reproduction_matrix + growth_matrix
# define simulation length
simulation_length <- 200
# starting condition 1: 100 individuals in final life stage
initial_state_adult <- state_initialise_adult(num_stages = 4, initial_size = 100)
# starting condition 2: 100 individuals spread across life stages
initial_state_spread <- state_initialise_spread(num_stages = 4, initial_size = 100)
# run deterministic simulation
result_adult <- deterministic_simulation(initial_state_adult, projection_matrix, simulation_length)
result_spread <- deterministic_simulation(initial_state_spread, projection_matrix, simulation_length)
png(filename = "question_1.png", width = 600, height = 400)
plot(result_adult, type = "l", col = "blue", lwd = 2, ylim = range(c(result_adult, result_spread)),
xlab = "Time Step", ylab = "Population Size", main = "Population Size Time Series")
lines(result_spread, col = "red", lwd = 2)
legend("topright", legend = c("100 Adults", "100 Spread"), col = c("blue", "red"), lwd = 2)
dev.off()
return("The hundred adults start off with a burst in population followed by a crash and eventual stabilization. The spread population has a much smaller initial burst/crash and trails the hundred adults throughout. Burst, crash and stabilization occur around the same time.")
}
question_1()
# Question 1
question_1 <- function(){
# define projection matrix
growth_matrix <- matrix(c(0.1, 0.0, 0.0, 0.0, 0.5, 0.4, 0.0, 0.0, 0.0, 0.4, 0.7, 0.0, 0.0, 0.0, 0.25, 0.4), nrow = 4, ncol = 4, byrow = TRUE)
reproduction_matrix <- matrix(c(0.0, 0.0, 0.0, 2.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), nrow = 4, ncol = 4, byrow = TRUE)
projection_matrix <- reproduction_matrix + growth_matrix
# define simulation length
simulation_length <- 50
# starting condition 1: 100 individuals in final life stage
initial_state_adult <- state_initialise_adult(num_stages = 4, initial_size = 100)
# starting condition 2: 100 individuals spread across life stages
initial_state_spread <- state_initialise_spread(num_stages = 4, initial_size = 100)
# run deterministic simulation
result_adult <- deterministic_simulation(initial_state_adult, projection_matrix, simulation_length)
result_spread <- deterministic_simulation(initial_state_spread, projection_matrix, simulation_length)
png(filename = "question_1.png", width = 600, height = 400)
plot(result_adult, type = "l", col = "blue", lwd = 2, ylim = range(c(result_adult, result_spread)),
xlab = "Time Step", ylab = "Population Size", main = "Population Size Time Series")
lines(result_spread, col = "red", lwd = 2)
legend("topright", legend = c("100 Adults", "100 Spread"), col = c("blue", "red"), lwd = 2)
dev.off()
return("The hundred adults start off with a burst in population followed by a crash and eventual stabilization. The spread population has a much smaller initial burst/crash and trails the hundred adults throughout. Burst, crash and stabilization occur around the same time.")
}
question_1()
# define simulation length
simulation_length <- 24
# Question 1
question_1 <- function(){
# define projection matrix
growth_matrix <- matrix(c(0.1, 0.0, 0.0, 0.0, 0.5, 0.4, 0.0, 0.0, 0.0, 0.4, 0.7, 0.0, 0.0, 0.0, 0.25, 0.4), nrow = 4, ncol = 4, byrow = TRUE)
reproduction_matrix <- matrix(c(0.0, 0.0, 0.0, 2.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), nrow = 4, ncol = 4, byrow = TRUE)
projection_matrix <- reproduction_matrix + growth_matrix
# define simulation length
simulation_length <- 24
# starting condition 1: 100 individuals in final life stage
initial_state_adult <- state_initialise_adult(num_stages = 4, initial_size = 100)
# starting condition 2: 100 individuals spread across life stages
initial_state_spread <- state_initialise_spread(num_stages = 4, initial_size = 100)
# run deterministic simulation
result_adult <- deterministic_simulation(initial_state_adult, projection_matrix, simulation_length)
result_spread <- deterministic_simulation(initial_state_spread, projection_matrix, simulation_length)
png(filename = "question_1.png", width = 600, height = 400)
plot(result_adult, type = "l", col = "blue", lwd = 2, ylim = range(c(result_adult, result_spread)),
xlab = "Time Step", ylab = "Population Size", main = "Population Size Time Series")
lines(result_spread, col = "red", lwd = 2)
legend("topright", legend = c("100 Adults", "100 Spread"), col = c("blue", "red"), lwd = 2)
dev.off()
return("The hundred adults start off with a burst in population followed by a crash and eventual stabilization. The spread population has a much smaller initial burst/crash and trails the hundred adults throughout. Burst, crash and stabilization occur around the same time.")
}
question_1()
question_1()
source(Demographic.R)
source("Demographic.R")
# Question 2
question_2 <- function(){
# define projection matrix
growth_matrix <- matrix(c(0.1, 0.0, 0.0, 0.0, 0.5, 0.4, 0.0, 0.0, 0.0, 0.4, 0.7, 0.0, 0.0, 0.0, 0.25, 0.4), nrow = 4, ncol = 4, byrow = TRUE)
reproduction_matrix <- matrix(c(0.0, 0.0, 0.0, 2.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), nrow = 4, ncol = 4, byrow = TRUE)
projection_matrix <- reproduction_matrix + growth_matrix
# define clutch distribution
clutch_distribution <- c(0.06, 0.08, 0.13, 0.15, 0.16, 0.18, 0.15, 0.06, 0.03)
# define simulation length
simulation_length <- 24
# starting condition 1: 100 individuals in final life stage
initial_state_adult <- state_initialise_adult(num_stages = 4, initial_size = 100)
# starting condition 2: 100 individuals spread across life stages
initial_state_spread <- state_initialise_spread(num_stages = 4, initial_size = 100)
# run stochastic simulation
result_adult <- stochastic_simulation(initial_state_adult, projection_matrix, simulation_length)
result_spread <- stochastic_simulation(initial_state_spread, projection_matrix, simulation_length)
# make plot
png(filename = "question_2.png", width = 600, height = 400)
plot(result_adult, type = "l", col = "blue", lwd = 2, ylim = range(c(result_adult, result_spread)),
xlab = "Time Step", ylab = "Population Size", main = "Population Size Time Series")
lines(result_spread, col = "red", lwd = 2)
legend("topright", legend = c("100 Adults", "100 Spread"), col = c("blue", "red"), lwd = 2)
dev.off()
return("type your written answer here")
}
question_2
question_2()
state_initialise_adult <- function(num_stages,initial_size){
state <- rep(0, num_stages)
state[num_stages] <- initial_size
return(state)
}
state_initialise_spread <- function(num_stages,initial_size){
base_count <- floor(initial_size / num_stages)
remainder <- initial_size %% num_stages
state <- rep(base_count, num_stages)
if (remainder > 0) {
state[1:remainder] <- state[1:remainder] + 1
}
return(state)
}
# Question 2
question_2 <- function(){
# define projection matrix
growth_matrix <- matrix(c(0.1, 0.0, 0.0, 0.0, 0.5, 0.4, 0.0, 0.0, 0.0, 0.4, 0.7, 0.0, 0.0, 0.0, 0.25, 0.4), nrow = 4, ncol = 4, byrow = TRUE)
reproduction_matrix <- matrix(c(0.0, 0.0, 0.0, 2.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), nrow = 4, ncol = 4, byrow = TRUE)
projection_matrix <- reproduction_matrix + growth_matrix
# define clutch distribution
clutch_distribution <- c(0.06, 0.08, 0.13, 0.15, 0.16, 0.18, 0.15, 0.06, 0.03)
# define simulation length
simulation_length <- 24
# starting condition 1: 100 individuals in final life stage
initial_state_adult <- state_initialise_adult(num_stages = 4, initial_size = 100)
# starting condition 2: 100 individuals spread across life stages
initial_state_spread <- state_initialise_spread(num_stages = 4, initial_size = 100)
# run stochastic simulation
result_adult <- stochastic_simulation(initial_state_adult, projection_matrix, simulation_length)
result_spread <- stochastic_simulation(initial_state_spread, projection_matrix, simulation_length)
# make plot
png(filename = "question_2.png", width = 600, height = 400)
plot(result_adult, type = "l", col = "blue", lwd = 2, ylim = range(c(result_adult, result_spread)),
xlab = "Time Step", ylab = "Population Size", main = "Population Size Time Series")
lines(result_spread, col = "red", lwd = 2)
legend("topright", legend = c("100 Adults", "100 Spread"), col = c("blue", "red"), lwd = 2)
dev.off()
return("type your written answer here")
}
question_2()
# Question 2
question_2 <- function(){
# define projection matrix
growth_matrix <- matrix(c(0.1, 0.0, 0.0, 0.0, 0.5, 0.4, 0.0, 0.0, 0.0, 0.4, 0.7, 0.0, 0.0, 0.0, 0.25, 0.4), nrow = 4, ncol = 4, byrow = TRUE)
reproduction_matrix <- matrix(c(0.0, 0.0, 0.0, 2.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), nrow = 4, ncol = 4, byrow = TRUE)
projection_matrix <- reproduction_matrix + growth_matrix
# define clutch distribution
clutch_distribution <- c(0.06, 0.08, 0.13, 0.15, 0.16, 0.18, 0.15, 0.06, 0.03)
# define simulation length
simulation_length <- 24
# starting condition 1: 100 individuals in final life stage
initial_state_adult <- state_initialise_adult(num_stages = 4, initial_size = 100)
# starting condition 2: 100 individuals spread across life stages
initial_state_spread <- state_initialise_spread(num_stages = 4, initial_size = 100)
# run stochastic simulation
result_adult <- stochastic_simulation(initial_state_adult, projection_matrix, simulation_length)
result_spread <- stochastic_simulation(initial_state_spread, projection_matrix, simulation_length)
# make plot
png(filename = "question_2.png", width = 600, height = 400)
plot(result_adult, type = "l", col = "blue", lwd = 2, ylim = range(c(result_adult, result_spread)),
xlab = "Time Step", ylab = "Population Size", main = "Population Size Time Series")
lines(result_spread, col = "red", lwd = 2)
legend("topright", legend = c("100 Adults", "100 Spread"), col = c("blue", "red"), lwd = 2)
dev.off()
return("type your written answer here")
}
question_2()
# Question 2
question_2 <- function(){
# define projection matrix
growth_matrix <- matrix(c(0.1, 0.0, 0.0, 0.0, 0.5, 0.4, 0.0, 0.0, 0.0, 0.4, 0.7, 0.0, 0.0, 0.0, 0.25, 0.4), nrow = 4, ncol = 4, byrow = TRUE)
reproduction_matrix <- matrix(c(0.0, 0.0, 0.0, 2.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), nrow = 4, ncol = 4, byrow = TRUE)
# define clutch distribution
clutch_distribution <- c(0.06, 0.08, 0.13, 0.15, 0.16, 0.18, 0.15, 0.06, 0.03)
# define simulation length
simulation_length <- 24
# starting condition 1: 100 individuals in final life stage
initial_state_adult <- state_initialise_adult(num_stages = 4, initial_size = 100)
# starting condition 2: 100 individuals spread across life stages
initial_state_spread <- state_initialise_spread(num_stages = 4, initial_size = 100)
# run stochastic simulation
result_adult <- stochastic_simulation(initial_state_adult, growth_matrix, reproduction_matrix, clutch_distribution, simulation_length)
result_spread <- stochastic_simulation(initial_state_spread, growth_matrix, reproduction_matrix, clutch_distribution, simulation_length)
# make plot
png(filename = "question_2.png", width = 600, height = 400)
plot(result_adult, type = "l", col = "blue", lwd = 2, ylim = range(c(result_adult, result_spread)),
xlab = "Time Step", ylab = "Population Size", main = "Population Size Time Series")
lines(result_spread, col = "red", lwd = 2)
legend("topright", legend = c("100 Adults", "100 Spread"), col = c("blue", "red"), lwd = 2)
dev.off()
return("type your written answer here")
}
question_2()
# Question 21
sum_vect <- function(x, y) {
# define length of each vector
len_x <- length(x)
len_y <- length(y)
# figure out which vector is longer
max_len <- max(len_x, len_y)
# extend shorter vector to match length
if (len_x < max_len) {
x <- c(x, rep(0, max_len - len_x))
}
if (len_y < max_len) {
y <- c(y, rep(0, max_len - len_y))
}
# sum vectors
return(x + y)
}
sum_vect(c(1,3),c(1,0,5,2))
# Question 21
sum_vect <- function(x, y) {
# define length of each vector
len_x <- length(x)
len_y <- length(y)
# figure out which vector is longer
longer_len <- max(len_x, len_y)
# extend shorter vector to match length
if (len_x < longer_len) {
x <- c(x, rep(0, longer_len - len_x))
}
if (len_y < longer_len) {
y <- c(y, rep(0, longer_len - len_y))
}
# sum vectors
return(x + y)
}
sum_vect(c(1,3),c(1,0,5,2))
# Question 2
question_2 <- function(){
# define projection matrix
growth_matrix <- matrix(c(0.1, 0.0, 0.0, 0.0, 0.5, 0.4, 0.0, 0.0, 0.0, 0.4, 0.7, 0.0, 0.0, 0.0, 0.25, 0.4), nrow = 4, ncol = 4, byrow = TRUE)
reproduction_matrix <- matrix(c(0.0, 0.0, 0.0, 2.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), nrow = 4, ncol = 4, byrow = TRUE)
# define clutch distribution
clutch_distribution <- c(0.06, 0.08, 0.13, 0.15, 0.16, 0.18, 0.15, 0.06, 0.03)
# define simulation length
simulation_length <- 24
# starting condition 1: 100 individuals in final life stage
initial_state_adult <- state_initialise_adult(num_stages = 4, initial_size = 100)
# starting condition 2: 100 individuals spread across life stages
initial_state_spread <- state_initialise_spread(num_stages = 4, initial_size = 100)
# run stochastic simulation
result_adult <- stochastic_simulation(initial_state_adult, growth_matrix, reproduction_matrix, clutch_distribution, simulation_length)
result_spread <- stochastic_simulation(initial_state_spread, growth_matrix, reproduction_matrix, clutch_distribution, simulation_length)
# make plot
png(filename = "question_2.png", width = 600, height = 400)
plot(result_adult, type = "l", col = "blue", lwd = 2, ylim = range(c(result_adult, result_spread)),
xlab = "Time Step", ylab = "Population Size", main = "Population Size Time Series")
lines(result_spread, col = "red", lwd = 2)
legend("topright", legend = c("100 Adults", "100 Spread"), col = c("blue", "red"), lwd = 2)
dev.off()
return("type your written answer here")
}
question_2()
source("Demographic.R")
# starting condition list
initial_conditions <- list(
"large_adult" = state_initialise_adult(num_stages = 4, initial_size = 100)
"small_adult" = state_initialise_adult(num_stages = 4, initial_size = 10)
rm(list=ls()) # good practice
graphics.off() # turns off graphics
source("Demographic.R") # sources all functions needed
iter <- as.numeric(Sys.getenv("PBS_ARRAY_INDEX")) # read in job number
# set seed for reproducibility
set.seed(iter)
# define growth/reproduction/projection matrix
growth_matrix <- matrix(c(0.1, 0.0, 0.0, 0.0, 0.5, 0.4, 0.0, 0.0, 0.0, 0.4, 0.7, 0.0, 0.0, 0.0, 0.25, 0.4), nrow = 4, ncol = 4, byrow = TRUE)
reproduction_matrix <- matrix(c(0.0, 0.0, 0.0, 2.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), nrow = 4, ncol = 4, byrow = TRUE)
projection_matrix <- growth_matrix + reproduction_matrix
# define clutch distribution
clutch_distribution <- c(0.06, 0.08, 0.13, 0.15, 0.16, 0.18, 0.15, 0.06, 0.03)
# define simulation length
simulation_length <- 120
# define number of simulations
num_simulations <- 150
# starting condition list
initial_conditions <- list(
"large_adult" = state_initialise_adult(num_stages = 4, initial_size = 100),
"small_adult" = state_initialise_adult(num_stages = 4, initial_size = 10),
"large_spread" = state_initialise_spread(num_stages = 4, initial_size = 100),
"small_spread" = state_initialise_spread(num_stages = 4, initial_size = 100)
)
# assign initial conditions based on job number
initial_condition_names <- names(initial_conditions)
selected_condition <- initial_condition_names[(iter - 1) %% 4 + 1]
initial_state <- initial_conditions[[selected_condition]]
# create filename for storing results
output <- paste0("simulation_results_", iter, ".RData")
simulation_results <- vector("list", num_simulations)
View(simulation_results)
# run simulations
for (i in 1:num_simulations) {
simulation_results[[i]] <- stochastic_simulation(
initial_state,
growth_matrix,
reproduction_matrix,
clutch_distribution,
simulation_length)
}
# Clear the workspace and turn off graphics
rm(list = ls())
graphics.off()
# Source the required functions from demographic.R
source("demographic.R")
# Clear the workspace and turn off graphics
rm(list = ls())
graphics.off()
# Source the required functions from demographic.R
source("Demographic.R")
# Read in the job number from the cluster
iter <- as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
# Set the random seed for reproducibility
set.seed(iter)
# Clear the workspace and turn off graphics
rm(list = ls())
graphics.off()
# Source the required functions from demographic.R
source("Demographic.R")
# Read in the job number from the cluster
iter <- as.numeric(Sys.getenv("PBS_ARRAY_INDEX"))
# Set the random seed for reproducibility
set.seed(iter)
rm(list=ls()) # good practice
graphics.off() # turns off graphics
source("Demographic.R") # sources all functions needed
iter <- 2
# set seed for reproducibility
set.seed(iter)
# define growth/reproduction/projection matrix
growth_matrix <- matrix(c(0.1, 0.0, 0.0, 0.0, 0.5, 0.4, 0.0, 0.0, 0.0, 0.4, 0.7, 0.0, 0.0, 0.0, 0.25, 0.4), nrow = 4, ncol = 4, byrow = TRUE)
reproduction_matrix <- matrix(c(0.0, 0.0, 0.0, 2.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), nrow = 4, ncol = 4, byrow = TRUE)
projection_matrix <- growth_matrix + reproduction_matrix
# define clutch distribution
clutch_distribution <- c(0.06, 0.08, 0.13, 0.15, 0.16, 0.18, 0.15, 0.06, 0.03)
# define simulation length
simulation_length <- 120
# define number of simulations
num_simulations <- 150
# starting condition list
num_stages <- 4
initial_conditions <- list(
"large_adult" = state_initialise_adult(num_stages, initial_size = 100),
"small_adult" = state_initialise_adult(num_stages, initial_size = 10),
"large_spread" = state_initialise_spread(num_stages, initial_size = 100),
"small_spread" = state_initialise_spread(num_stages, initial_size = 10)
)
# assign initial conditions based on job number
initial_condition_names <- names(initial_conditions)
iter <- c(1,100)
# assign initial conditions based on job number
initial_condition_names <- names(initial_conditions)
selected_condition <- initial_condition_names[(iter - 1) %% 4 + 1]
initial_state <- initial_conditions[[selected_condition]]
# CMEE 2024 HPC exercises R code pro forma
# For stochastic demographic model cluster run
# Question 3
rm(list=ls()) # good practice
graphics.off() # turns off graphics
source("Demographic.R") # sources all functions needed
iter <- as.numeric(Sys.getenv("PBS_ARRAY_INDEX")) # read in job number
# set seed for reproducibility
set.seed(iter)
mv output_*
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_demographic_cluster.R")
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_demographic_cluster.R")
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_demographic_cluster.R")
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_demographic_cluster.R")
load("/home/sean/Documents/CMEECourseWork/week6/code/simulation_results_3.RData")
View(simulation_results)
simulation_results[[5]]
initial_conditions <- list(
"large_adult" = state_initialise_adult(num_stages, initial_size = 100),
"small_adult" = state_initialise_adult(num_stages, initial_size = 10),
"large_spread" = state_initialise_spread(num_stages, initial_size = 100),
"small_spread" = state_initialise_spread(num_stages, initial_size = 10)
)
View(initial_conditions)
initial_conditions[["large_spread"]]
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_demographic_cluster.R")
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_demographic_cluster.R")
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_demographic_cluster.R")
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_demographic_cluster.R")
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_demographic_cluster.R")
load("/home/sean/Documents/CMEECourseWork/week6/code/simulation_results_3.RData")
View(simulation_results)
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_demographic_cluster.R")
load("/home/sean/Documents/CMEECourseWork/week6/code/output_3.rda")
