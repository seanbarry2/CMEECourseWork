par(mfrow = c(1, 1))  # Arrange plots in a 1-row, 2-column layout
# Simple script to read in and visualize data
library(tidyverse)
df <- read.csv("../data/LogisticGrowthData.csv")
df <- df[, !grepl("^X$", names(df))]
df <- df[, !names(df) %in% "Time_units"]
par(mfrow = c(1, 1))  # Arrange plots in a 1-row, 2-column layout
par(mar = c(4, 4, 2, 1))  # Adjust margins (bottom, left, top, right)
# Scatter plot for PopBio vs Time
plot(df$Time, df$PopBio,
xlab = "Time", ylab = "PopBio",
main = "PopBio vs Time",
pch = 16, col = "blue")
# Scatter plot for Temp vs Time
plot(df$Time, df$Temp,
xlab = "Time", ylab = "Temperature",
main = "Temperature vs Time",
pch = 16, col = "red")
View(df)
# 1) PopBio vs Time, colored by Species
ggplot(df, aes(x = Time, y = PopBio, color = Species)) +
geom_point() +
labs(
title = "Population Biology Over Time (by Species)",
x = "Time",
y = "PopBio"
) +
theme_minimal()
# 2) PopBio vs Time, faceted by Medium
#    Here, color is still by Species, but each Medium gets its own panel.
ggplot(df, aes(x = Time, y = PopBio, color = Species)) +
geom_point() +
facet_wrap(~ Medium) +
labs(
title = "PopBio Over Time Faceted by Medium",
x = "Time",
y = "PopBio"
) +
theme_minimal()
# 3) Temperature vs Time, colored by Species
ggplot(df, aes(x = Time, y = Temp, color = Species)) +
geom_point() +
labs(
title = "Temperature Over Time (by Species)",
x = "Time",
y = "Temperature"
) +
theme_minimal()
# Scatter plot for Temp vs Time
plot(df$Time, df$Temp,
xlab = "Time", ylab = "Temperature",
main = "Temperature vs Time",
pch = 16, col = "red")
# Scatter plot for PopBio vs Time
plot(df$Time, df$PopBio,
xlab = "Time", ylab = "PopBio",
main = "PopBio vs Time",
pch = 16, col = "blue")
# 1) PopBio vs Time, colored by Species
ggplot(df, aes(x = Time, y = PopBio, color = Species)) +
geom_point() +
labs(
title = "Population Biology Over Time (by Species)",
x = "Time",
y = "PopBio"
) +
theme_minimal()
setwd("~/Documents/CMEECourseWork/week6/code")
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
question_18()
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
question_22()
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
Challenge_B()
Challenge_C()
Challenge_C()
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
Challenge_C()
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
Challenge_C()
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
Challenge_C()
challenge_e <- function(J, v) {
#
# J = community size (number of individuals)
# v = speciation rate (between 0 and 1)
#
# Returns a vector of final species abundances.
#
# 1) Each individual starts as its own "lineage" of abundance 1
lineages   <- rep(1, J)
# 2) We will build up a vector 'abundances' as lineages "coalesce" or speciate
abundances <- numeric(0)
# 3) N tracks how many lineages remain (initially J)
N <- J
# 4) Calculate theta according to the pseudocode.
#    Common formula for this challenge is:
#      theta = (v * (J - 1)) / (1 - v)
#
#    If your instructions differ, adjust accordingly.
theta <- (v * (J - 1)) / (1 - v)
# 5) Keep merging or “speciating” lineages until only 1 remains
while (N > 1) {
# (e) Choose a random index j in 1..N
j <- sample.int(N, 1)
# (f) Pick a random decimal number between 0 and 1
randnum <- runif(1)
# (g) If randnum < theta/(theta + N - 1), lineage j is considered a 'new species'
#     => we append its abundance to 'abundances'
#     => then remove lineage j.
if (randnum < theta / (theta + N - 1)) {
abundances <- c(abundances, lineages[j])
} else {
# (h) Otherwise, pick another index i != j and coalesce (merge) j into i
i <- sample(setdiff(seq_len(N), j), 1)
lineages[i] <- lineages[i] + lineages[j]
}
# (i) Remove the j-th lineage from 'lineages'
lineages <- lineages[-j]
# (j) Decrease N by one
N <- N - 1
# (k) If N > 1, repeat from (e).  (That happens automatically via while loop.)
}
# (l) Once N = 1, the single remaining lineage is also appended to 'abundances'
abundances <- c(abundances, lineages[1])
# Done! 'abundances' now contains the simulated species abundances.
return(abundances)
}
challenge_e()
challenge_e(100, 0.01)
Challenge_E <- function() {
##################################################
# 1) Parameters (example values; adjust as needed)
##################################################
J <- 100            # Community size
v <- 0.1            # Speciation rate
# HPC data file: Suppose you have a saved RData file with HPC final abundances or octaves
hpc_file <- "processed_neutral_cluster_results.rda"
##################################################
# 2) Coalescent function (per pseudocode)
##################################################
coalescent_sim <- function(J, v) {
# Start with each individual in its own lineage
lineages <- rep(1, J)   # each lineage has abundance=1
abundances <- numeric(0)
N <- J
# theta = (v*(J-1)) / (1 - v), as given in pseudocode
theta <- (v * (J - 1)) / (1 - v)
# While more than 1 lineage remains
while (N > 1) {
# e) pick random lineage j
j <- sample.int(N, 1)
# f) pick random decimal 0..1
randnum <- runif(1)
# g) if randnum < theta/(theta + N - 1) => speciation
if (randnum < theta / (theta + N - 1)) {
abundances <- c(abundances, lineages[j])
} else {
# h) otherwise, coalesce j into some other i != j
i <- sample(setdiff(seq_len(N), j), 1)
lineages[i] <- lineages[i] + lineages[j]
}
# i) remove lineage j
lineages <- lineages[-j]
# j) decrement N
N <- N - 1
}
# l) once N=1, add final lineage abundance to abundances
abundances <- c(abundances, lineages[1])
return(abundances)
}
##################################################
# 3) Run the coalescent simulation
##################################################
t_start <- proc.time()[3]  # measure CPU time in seconds
coalescent_abund <- coalescent_sim(J, v)
coalescent_time <- proc.time()[3] - t_start  # total seconds used
##################################################
# 4) Load HPC results for comparison
##################################################
# Suppose your HPC data has a final abundance distribution in the object "mean_octaves"
# (If you have raw abundance vectors, or octaves from question 22, adapt accordingly.)
if (!file.exists(hpc_file)) {
stop("Cannot find HPC results file: ", hpc_file)
}
load(hpc_file)
# e.g., mean_octaves is a list indexed by community size strings: "500", "1000", etc.
# We'll assume mean_octaves[[as.character(J)]] is the mean octave distribution for size J
# from HPC runs. Or perhaps you have final abundance vectors. Adapt as needed.
# If your HPC data is in “octave” form (like question 22), but coalescent_abund is raw abundance,
# you may need to convert coalescent_abund -> octave vector via your octaves() function:
coalescent_octave <- octaves(coalescent_abund)  # from your earlier code
# Meanwhile, HPC might have mean_octaves[[as.character(J)]] as e.g. a mean octave vector:
hpc_octave <- mean_octaves[[as.character(J)]]
##################################################
# 5) Plot: Compare HPC vs Coalescent side by side
##################################################
png("Challenge_E.png", width = 800, height = 400)
par(mfrow = c(1, 2))
# Left: Coalescent octave as bar plot
barplot(
coalescent_octave,
main     = "Coalescent Simulation",
xlab     = "Octave Class",
ylab     = "Species Count",
col      = "skyblue"
)
# Right: HPC mean octave
barplot(
hpc_octave,
main     = "HPC Mean Octave",
xlab     = "Octave Class",
ylab     = "Species Count",
col      = "pink"
)
dev.off()
##################################################
# 6) Return text comparing CPU usage
##################################################
# Suppose HPC took 200 total CPU hours for many runs, while coalescent_time was e.g. 0.01 seconds
# Obviously you’ll put the real HPC CPU usage or approximation here:
hpc_cpu_hours <- 200      # just an example
coalescent_cpu_sec <- coalescent_time
coalescent_cpu_hours <- coalescent_cpu_sec / 3600
explanation <- paste(
"Challenge E comparison:\n",
"Community size =", J, ", speciation rate =", v, "\n\n",
"The HPC simulations took approximately", hpc_cpu_hours, "CPU hours.\n",
"Our coalescent run took only", round(coalescent_cpu_hours, 4), "CPU hours.\n\n",
"Why so much faster? Because the coalescent approach doesn't simulate each generation.\n",
"It condenses the genealogical events into merges/speciation steps, whereas the HPC approach\n",
"simulates many births and deaths in real-time steps. The coalescent method is thus\n",
"computationally far more efficient for large populations, giving the same final distribution."
)
return(explanation)
}
Challenge_E()
Challenge_E <- function(J = 100, v = 0.1) {
###########################################################################
# 1) Run a coalescent simulation per the pseudocode to get final abundances
###########################################################################
# Start timer to measure how long coalescent simulation takes
start_time <- proc.time()[3]
# a) Initialize 'lineages' of length J with 1 in every entry
lineages <- rep(1, J)
# b) Initialize empty vector abundances
abundances <- numeric(0)
# c) Initialize N = J
N <- J
# d) Calculate theta = (v * (J - 1)) / (1 - v)
theta <- (v * (J - 1)) / (1 - v)
# e..h) While N > 1, pick a random index j, pick randnum ~ Uniform(0,1),
#        either 'speciate' or 'coalesce'
while (N > 1) {
# e) Choose an index j for lineages at random
j <- sample.int(N, 1)
# f) Pick a random decimal
randnum <- runif(1)
# Probability of speciation event
p_speciate <- theta / (theta + N - 1)
# g) If randnum < p_speciate => append lineages[j] to abundances
if (randnum < p_speciate) {
abundances <- c(abundances, lineages[j])
} else {
# h) coalesce: choose another index i != j at random
i <- sample(setdiff(seq_len(N), j), 1)
lineages[i] <- lineages[i] + lineages[j]
}
# i) Remove lineages[j]
lineages <- lineages[-j]
# j) Decrease N
N <- N - 1
}
# l) Once N=1, the only element left in lineages is appended to abundances
abundances <- c(abundances, lineages[1])
# Stop timer
coalescent_cpu_sec <- proc.time()[3] - start_time
###########################################################################
# 2) Compare with HPC or Q22 results
#    (Adapt these steps to however you stored HPC data.)
###########################################################################
# Suppose you have a file "processed_neutral_cluster_results.rda"
# from question_22, with final_mean_octaves or something similar.
# We'll just load that file, pick out the relevant distribution for J=100.
# If your HPC data is in a different format, adjust accordingly.
hpc_file <- "processed_neutral_cluster_results.rda"
if (!file.exists(hpc_file)) {
warning("HPC results file not found, skipping comparison.")
# We'll just do a single plot of coalescent abundance, no HPC.
}
# Convert coalescent abundance distribution => an octave vector
coalescent_octave <- octaves(abundances)
# For HPC, let's assume the file has an object named 'final_mean_octaves'
# which is a list of length 4 (for 500, 1000, 2500, 5000). But J=100 not in that list, so:
# For demonstration, we'll skip HPC if J=100 is not in the HPC results.
# If your HPC used J=100, store it somewhere or adapt to a local approach.
hpc_octave <- NULL
hpc_data_available <- FALSE
if (file.exists(hpc_file)) {
load(hpc_file)  # loads final_mean_octaves or whatever you saved
# If your HPC data is e.g. final_mean_octaves for (100, etc), then do:
# hpc_octave <- final_mean_octaves[[ <index for J=100> ]]
# hpc_data_available <- TRUE  (if found)
#
# For example, if you did Q22 with community_size=100 and you saved a 'mean_oct_max' or 'mean_oct_min'?
# Then you might skip 'octaves' since it's already an octave. Or if you have a raw abundance distribution, run octaves() on it.
# For demonstration: We'll just pretend HPC data is not available for J=100.
}
###########################################################################
# 3) Plot
###########################################################################
png("Challenge_E.png", width=800, height=400)
par(mfrow=c(1, 2))
# Left panel: coalescent result
barplot(
coalescent_octave,
main = paste("Coalescent result\nJ=", J, " v=", v),
xlab = "Octave class",
ylab = "Num. species",
col  = "lightblue"
)
# Right panel: HPC if available
if (is.null(hpc_octave)) {
barplot(
0,
main = "No HPC data available",
xlab = "",
ylab = "",
col  = "white"
)
} else {
barplot(
hpc_octave,
main = "HPC distribution",
xlab = "Octave class",
ylab = "Num. species",
col  = "pink"
)
}
dev.off()
###########################################################################
# 4) Return explanation on CPU time comparison
###########################################################################
# Suppose HPC used 10 CPU hours total for a bunch of runs at J=100,
# while coalescent_time is coalescent_cpu_sec / 3600 in hours:
hpc_cpu_hours <- 10
coalescent_cpu_hours <- coalescent_cpu_sec / 3600
explanation <- paste0(
"Challenge_E Coalescent approach:\n",
"For J=", J, " and speciation_rate=", v, ":\n",
"Coalescent simulation took ", round(coalescent_cpu_hours, 4), " hours of CPU time.\n",
"In contrast, HPC or Q22 approach might have taken around ", hpc_cpu_hours, " hours ",
"for a similar set of runs at community size ", J, ".\n\n",
"Why are coalescence simulations so much faster? Because the coalescent approach ",
"skips simulating individual births/deaths over thousands of generations. ",
"It collapses the lineage merging/speciation events into a direct genealogical process, ",
"dramatically reducing the computational effort needed."
)
return(explanation)
}
Challenge_E()
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
Challenge_E()
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
Challenge_E()
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
Challenge_E()
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
Challenge_E()
Challenge_E <- function(J = 500, v = 0.1) {
###########################################################################
# (1) Coalescent simulation: Final species abundances
###########################################################################
# Start timer for coalescent approach
start_time <- proc.time()[3]
# a) lineages = vector of length J with 1 in every entry
lineages <- rep(1, J)
# b) empty vector abundances
abundances <- numeric(0)
# c) N = J
N <- J
# d) theta = (v * (J - 1)) / (1 - v)
theta <- (v * (J - 1)) / (1 - v)
# e..h) While N > 1, pick a random lineage to speciate or coalesce
while (N > 1) {
j <- sample.int(N, 1)   # pick random index j
randnum <- runif(1)     # uniform(0,1)
p_speciate <- theta / (theta + N - 1)
if (randnum < p_speciate) {
# g) speciate => append lineages[j] to abundances
abundances <- c(abundances, lineages[j])
} else {
# h) coalesce => pick i != j
i <- sample(setdiff(seq_len(N), j), 1)
lineages[i] <- lineages[i] + lineages[j]
}
# i) remove j
lineages <- lineages[-j]
# j) N = N - 1
N <- N - 1
}
# l) N=1 => final lineage => add to abundances
abundances <- c(abundances, lineages[1])
# Stop timer
coalescent_seconds <- proc.time()[3] - start_time
###########################################################################
# (2) Load HPC data from question_26 for the same community size J
###########################################################################
hpc_file <- "processed_neutral_cluster_results.rda"
# HPC data is only available if J is one of 500,1000,2500,5000
# question_26 saved 'final_mean_octaves' as a list of length 4,
# in the order: size=500 -> index=1, 1000->2, 2500->3, 5000->4.
hpc_index <- switch(
as.character(J),
"500"  = 1,
"1000" = 2,
"2500" = 3,
"5000" = 4,
NA
)
hpc_octave <- NULL
hpc_data_found <- FALSE
if (file.exists(hpc_file) && !is.na(hpc_index)) {
load(hpc_file)  # loads object 'final_mean_octaves'
# We'll extract final_mean_octaves[[hpc_index]]
# If it's empty or not found, we skip.
possible_oct <- final_mean_octaves[[hpc_index]]
if (length(possible_oct) > 0) {
hpc_octave <- possible_oct
hpc_data_found <- TRUE
}
}
###########################################################################
# (3) Convert coalescent result to an octave vector
###########################################################################
coalescent_octave <- octaves(abundances)
###########################################################################
# (4) Plot side-by-side bar charts in "Challenge_E.png"
###########################################################################
png("Challenge_E.png", width=800, height=400)
par(mfrow=c(1,2))
# Left: coalescent distribution
barplot(
coalescent_octave,
main = paste("Coalescent (J=", J, ", v=", v, ")", sep=""),
xlab = "Octave class",
ylab = "Species count",
col  = "lightblue"
)
# Right: HPC distribution if available
if (hpc_data_found) {
barplot(
hpc_octave,
main = paste("HPC (J=", J, ")", sep=""),
xlab = "Octave class",
ylab = "Species count",
col  = "pink"
)
} else {
barplot(
0,
main = "No HPC data for this J",
col  = "white"
)
}
dev.off()
###########################################################################
# (5) Return explanation comparing CPU usage
###########################################################################
# Suppose HPC took X hours total for many runs, we can note that
# (just an example if you know the HPC usage).
# We'll pretend HPC used 20 CPU hours for this size,
# while coalescent_seconds is how long we took here.
hpc_cpu_hours <- 20   # example
coalescent_hours <- coalescent_seconds / 3600
explanation <- paste0(
"Challenge_E results for J=", J, " and v=", v, ":\n",
"Coalescent approach took about ", round(coalescent_hours, 4), " CPU hours.\n",
if (hpc_data_found) {
paste("We compared the final distribution to HPC's mean octave data for size ", J, ".\n")
} else {
"No HPC data was found for that J (or .rda file missing) so no direct comparison.\n"
},
"Why is coalescent so much faster? Because the coalescent method jumps directly to\n",
"the genealogical merges and speciation events, rather than iterating birth/death\n",
"processes for thousands of generations. HPC simulations often spend far more CPU\n",
"time simulating individual events in large communities.\n",
"The HPC approach (for a large number of runs) took ~", hpc_cpu_hours,
" hours, while the coalescent approach required only seconds or minutes."
)
return(explanation)
}
Challenge_E()
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
Challenge_E()
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
Challenge_E()
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
Challenge_E()
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
Challenge_E()
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
Challenge_E()
source("~/Documents/CMEECourseWork/week6/code/sb4524_HPC_2024_main.R")
Challenge_E()
