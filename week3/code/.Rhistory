legend.box.margin = margin(t = 0, r = 1, b = 0, l = 1),
legend.key.spacing.x = unit(2, "mm"),
axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
strip.text = element_text(size = 7, face = "bold", color = "black"),
panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
strip.background = element_rect(color = "black", fill = "grey", linewidth = 0.5),
strip.placement = "outside",
plot.margin = margin(t = 10, r = 100, b = 10, l = 100)
) +
guides(
color = guide_legend(nrow = 1)
)
# close pdf device
dev.off
# load other packages
library(broom)
# assuming 'data' is your dataset with the required columns
lm_results <- data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
summarise(
lm_model = list(lm(Predator.mass ~ Prey.mass, data = cur_data())),
.groups = "drop"
)
# extract details from each model
detailed_results <- lm_results %>%
mutate(
model_summary = map(lm_model, glance),  # Extract model summaries
tidy_summary = map(lm_model, tidy)     # Extract coefficients
) %>%
unnest(c(model_summary, tidy_summary), names_sep = "_")  # Disambiguate column names
# print column names for debugging
print(names(detailed_results))
# filter and pivot to separate intercept and slope
output <- detailed_results %>%
filter(tidy_summary_term %in% c("(Intercept)", "Prey.mass")) %>%  # Check for exact term values
pivot_wider(
names_from = tidy_summary_term,
values_from = c(
tidy_summary_estimate, tidy_summary_std.error, tidy_summary_statistic, tidy_summary_p.value
),
names_glue = "{tidy_summary_term}_{.value}"
)
# mrint column names after pivoting for debugging
print(names(output))
# rename columns based on actual names from debugging
output <- output %>%
rename(
Intercept = `(Intercept)_tidy_summary_estimate`,
Intercept_Std_Error = `(Intercept)_tidy_summary_std.error`,
Intercept_T_Statistic = `(Intercept)_tidy_summary_statistic`,
Intercept_P_Value = `(Intercept)_tidy_summary_p.value`,
Slope = `Prey.mass_tidy_summary_estimate`,
Slope_Std_Error = `Prey.mass_tidy_summary_std.error`,
Slope_T_Statistic = `Prey.mass_tidy_summary_statistic`,
Slope_P_Value = `Prey.mass_tidy_summary_p.value`
) %>%
select(
Type.of.feeding.interaction, Predator.lifestage,
Intercept, Intercept_Std_Error, Intercept_T_Statistic, Intercept_P_Value,
Slope, Slope_Std_Error, Slope_T_Statistic, Slope_P_Value,
model_summary_r.squared, model_summary_adj.r.squared,
model_summary_statistic, model_summary_p.value
) %>%
rename(
R_Squared = model_summary_r.squared,
Adjusted_R_Squared = model_summary_adj.r.squared,
F_Statistic = model_summary_statistic,
F_P_Value = model_summary_p.value
)
# write to csv
dir.create("../results", showWarnings = FALSE)
write.csv(output, "../results/PP_Regress_Results.csv", row.names = FALSE)
source("~/Documents/CMEECourseWork/week3/code/PP_Regress.R")
source("~/Documents/CMEECourseWork/week3/code/PP_Regress.R")
source("~/Documents/CMEECourseWork/week3/code/PP_Regress.R")
# read in necessary packages
library(tidyverse)
# read in data
data <- read.csv("../data/EcolArchives-E089-51-D1.csv")
# define output directory and name
output <- "../results/Visualizing_regressions.pdf"
# open pdf device
pdf(file = output, width = 8, height = 10)
ggplot(data, aes(x = Prey.mass, y = Predator.mass, color = Predator.lifestage)) +
geom_point(shape = 3) +
geom_smooth(
method = "lm",
se = TRUE,
aes(color = Predator.lifestage),
linewidth = 0.5,
fullrange = TRUE
) +
scale_x_log10() +
scale_y_log10() +
labs(
x = "Prey Mass in grams",
y = "Predator mass in grams",
color = "Predator.lifestage"
) +
facet_wrap(
~ Type.of.feeding.interaction,
ncol = 1,
strip.position = "right"
) +
theme_light() +
theme(
legend.position = "bottom",
legend.text = element_text(size = 8),
legend.title = element_text(size = 8, face = "bold"),
legend.key = element_rect(fill = "lightgrey", color = "black", linewidth = 0.2),
legend.key.size = unit(4, "mm"),
legend.box.margin = margin(t = 0, r = 1, b = 0, l = 1),
legend.key.spacing.x = unit(2, "mm"),
axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
strip.text = element_text(size = 7, face = "bold", color = "black"),
panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
strip.background = element_rect(color = "black", fill = "grey", linewidth = 0.5),
strip.placement = "outside",
plot.margin = margin(t = 10, r = 100, b = 10, l = 100)
) +
guides(
color = guide_legend(nrow = 1)
)
# close pdf device
dev.off()
# load other packages
library(broom)
# assuming 'data' is your dataset with the required columns
lm_results <- data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
summarise(
lm_model = list(lm(Predator.mass ~ Prey.mass, data = cur_data())),
.groups = "drop"
)
# extract details from each model
detailed_results <- lm_results %>%
mutate(
model_summary = map(lm_model, glance),  # Extract model summaries
tidy_summary = map(lm_model, tidy)     # Extract coefficients
) %>%
unnest(c(model_summary, tidy_summary), names_sep = "_")  # Disambiguate column names
# print column names for debugging
print(names(detailed_results))
# filter and pivot to separate intercept and slope
output <- detailed_results %>%
filter(tidy_summary_term %in% c("(Intercept)", "Prey.mass")) %>%  # Check for exact term values
pivot_wider(
names_from = tidy_summary_term,
values_from = c(
tidy_summary_estimate, tidy_summary_std.error, tidy_summary_statistic, tidy_summary_p.value
),
names_glue = "{tidy_summary_term}_{.value}"
)
# mrint column names after pivoting for debugging
print(names(output))
# rename columns based on actual names from debugging
output <- output %>%
rename(
Intercept = `(Intercept)_tidy_summary_estimate`,
Intercept_Std_Error = `(Intercept)_tidy_summary_std.error`,
Intercept_T_Statistic = `(Intercept)_tidy_summary_statistic`,
Intercept_P_Value = `(Intercept)_tidy_summary_p.value`,
Slope = `Prey.mass_tidy_summary_estimate`,
Slope_Std_Error = `Prey.mass_tidy_summary_std.error`,
Slope_T_Statistic = `Prey.mass_tidy_summary_statistic`,
Slope_P_Value = `Prey.mass_tidy_summary_p.value`
) %>%
select(
Type.of.feeding.interaction, Predator.lifestage,
Intercept, Intercept_Std_Error, Intercept_T_Statistic, Intercept_P_Value,
Slope, Slope_Std_Error, Slope_T_Statistic, Slope_P_Value,
model_summary_r.squared, model_summary_adj.r.squared,
model_summary_statistic, model_summary_p.value
) %>%
rename(
R_Squared = model_summary_r.squared,
Adjusted_R_Squared = model_summary_adj.r.squared,
F_Statistic = model_summary_statistic,
F_P_Value = model_summary_p.value
)
# write to csv
dir.create("../results", showWarnings = FALSE)
write.csv(output, "../results/PP_Regress_Results.csv", row.names = FALSE)
abc <- read.csv("../results/PP_Regress_Results.csv")
view(abc)
# Test
# Clear the workspace
rm(list = ls())
# Load necessary packages
library(tidyverse)
library(broom)
# Define input and output paths
data_path <- "../data/EcolArchives-E089-51-D1.csv"
pdf_output <- "../results/Visualizing_regressions.pdf"
csv_output <- "../results/PP_Regress_Results.csv"
# Read the dataset
if (!file.exists(data_path)) {
stop("Input data file not found. Please ensure '../data/EcolArchives-E089-51-D1.csv' exists.")
}
data <- read.csv(data_path)
View(data)
# Generate PDF visualizations
pdf(file = pdf_output, width = 8, height = 10)
ggplot(data, aes(x = Prey.mass, y = Predator.mass, color = Predator.lifestage)) +
geom_point(shape = 3) +
geom_smooth(
method = "lm",
se = TRUE,
aes(color = Predator.lifestage),
linewidth = 0.5,
fullrange = TRUE
) +
scale_x_log10() +
scale_y_log10() +
labs(
x = "Prey Mass in grams",
y = "Predator mass in grams",
color = "Predator.lifestage"
) +
facet_wrap(
~ Type.of.feeding.interaction,
ncol = 1,
strip.position = "right"
) +
theme_light() +
theme(
legend.position = "bottom",
legend.text = element_text(size = 8),
legend.title = element_text(size = 8, face = "bold"),
legend.key = element_rect(fill = "lightgrey", color = "black", linewidth = 0.2),
legend.key.size = unit(4, "mm"),
legend.box.margin = margin(t = 0, r = 1, b = 0, l = 1),
legend.key.spacing.x = unit(2, "mm"),
axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
strip.text = element_text(size = 7, face = "bold", color = "black"),
panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
strip.background = element_rect(color = "black", fill = "grey", linewidth = 0.5),
strip.placement = "outside",
plot.margin = margin(t = 10, r = 100, b = 10, l = 100)
) +
guides(
color = guide_legend(nrow = 1)
)
dev.off()
# Perform linear regression analysis
lm_results <- data %>%
group_by(Type.of.feeding.interaction, Predator.lifestage) %>%
summarise(
lm_model = list(lm(Predator.mass ~ Prey.mass, data = cur_data())),
.groups = "drop"
)
# Extract and format regression details
detailed_results <- lm_results %>%
mutate(
model_summary = map(lm_model, glance),  # Model-level summaries
tidy_summary = map(lm_model, tidy)     # Term-level coefficients
) %>%
unnest(c(model_summary, tidy_summary), names_sep = "_") %>%  # Expand summaries
filter(tidy_summary_term %in% c("(Intercept)", "Prey.mass")) %>%
pivot_wider(
names_from = tidy_summary_term,
values_from = c(
tidy_summary_estimate, tidy_summary_std.error, tidy_summary_statistic, tidy_summary_p.value
),
names_glue = "{tidy_summary_term}_{.value}"
) %>%
rename(
Intercept = `(Intercept)_tidy_summary_estimate`,
Intercept_Std_Error = `(Intercept)_tidy_summary_std.error`,
Intercept_T_Statistic = `(Intercept)_tidy_summary_statistic`,
Intercept_P_Value = `(Intercept)_tidy_summary_p.value`,
Slope = `Prey.mass_tidy_summary_estimate`,
Slope_Std_Error = `Prey.mass_tidy_summary_std.error`,
Slope_T_Statistic = `Prey.mass_tidy_summary_statistic`,
Slope_P_Value = `Prey.mass_tidy_summary_p.value`,
R_Squared = model_summary_r.squared,
Adjusted_R_Squared = model_summary_adj.r.squared,
F_Statistic = model_summary_statistic,
F_P_Value = model_summary_p.value
) %>%
select(
Type.of.feeding.interaction, Predator.lifestage,
Intercept, Intercept_Std_Error, Intercept_T_Statistic, Intercept_P_Value,
Slope, Slope_Std_Error, Slope_T_Statistic, Slope_P_Value,
R_Squared, Adjusted_R_Squared, F_Statistic, F_P_Value
)
# Save results to CSV
write.csv(detailed_results, csv_output, row.names = FALSE)
abc <- read.csv("../results/PP_Regress_Results.csv")
view(abc)
source("~/Documents/CMEECourseWork/week3/code/PP_regress.R")
source("~/Documents/CMEECourseWork/week3/code/PP_regress.R")
source("~/Documents/CMEECourseWork/week3/code/PP_regress.R")
source("~/Documents/CMEECourseWork/week3/code/PP_regress.R")
source("~/Documents/CMEECourseWork/week3/code/PP_regress.R")
# Load necessary packages
library(tidyverse)
library(broom)
# Define input and output paths
data_path <- "../data/EcolArchives-E089-51-D1.csv"
pdf_output <- "../results/Visualizing_regressions.pdf"
csv_output <- "../results/PP_Regress_Results.csv"
# Read the dataset
if (!file.exists(data_path)) {
stop("Input data file not found. Please ensure '../data/EcolArchives-E089-51-D1.csv' exists.")
}
data <- read.csv(data_path)
plot <- ggplot(data = data, aes(x = Prey.mass.grams, y = Predator.mass,
colour = Predator.lifestage)) +
geom_point(shape = 3, size = 1) +
geom_smooth(method = "lm", se = TRUE, fullrange = TRUE) +
scale_x_log10() +
scale_y_log10() +
facet_wrap( ~ Type.of.feeding.interaction, ncol = 1,
strip.position = "right") + # separate plots for each fi
labs(y = "Predator mass in grams", x = " Prey Mass in grams") +
theme_bw() +
theme(legend.position = "bottom",
plot.margin = margin(50,150,50,150),
legend.text = element_text(size = 8),
legend.title = element_text(size = 10))+
guides(colour = guide_legend(nrow = 1))
plot
plot <- ggplot(data = data, aes(x = Prey.mass, y = Predator.mass,
colour = Predator.lifestage)) +
geom_point(shape = 3, size = 1) +
geom_smooth(method = "lm", se = TRUE, fullrange = TRUE) +
scale_x_log10() +
scale_y_log10() +
facet_wrap( ~ Type.of.feeding.interaction, ncol = 1,
strip.position = "right") + # separate plots for each fi
labs(y = "Predator mass in grams", x = " Prey Mass in grams") +
theme_bw() +
theme(legend.position = "bottom",
plot.margin = margin(50,150,50,150),
legend.text = element_text(size = 8),
legend.title = element_text(size = 10))+
guides(colour = guide_legend(nrow = 1))
plot
# Define the plot
plot <- ggplot(data, aes(x = Prey.mass, y = Predator.mass, color = Predator.lifestage)) +
geom_point(shape = 3) +
geom_smooth(
method = "lm",
se = TRUE,
aes(color = Predator.lifestage),
linewidth = 0.5,
fullrange = TRUE
) +
scale_x_log10() +
scale_y_log10() +
labs(
x = "Prey Mass in grams",
y = "Predator mass in grams",
color = "Predator.lifestage"
) +
facet_wrap(
~ Type.of.feeding.interaction,
ncol = 1,
strip.position = "right"
) +
theme_light() +
theme(
legend.position = "bottom",
legend.text = element_text(size = 8),
legend.title = element_text(size = 8, face = "bold"),
legend.key = element_rect(fill = "lightgrey", color = "black", linewidth = 0.2),
legend.key.size = unit(4, "mm"),
legend.box.margin = margin(t = 0, r = 1, b = 0, l = 1),
legend.key.spacing.x = unit(2, "mm"),
axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
strip.text = element_text(size = 7, face = "bold", color = "black"),
panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
strip.background = element_rect(color = "black", fill = "grey", linewidth = 0.5),
strip.placement = "outside",
plot.margin = margin(t = 10, r = 100, b = 10, l = 100)
) +
guides(
color = guide_legend(nrow = 1)
)
plot
plot <- ggplot(data = data, aes(x = Prey.mass, y = Predator.mass,
colour = Predator.lifestage)) +
geom_point(shape = 3, size = 1) +
geom_smooth(method = "lm", se = TRUE, fullrange = TRUE) +
scale_x_log10() +
scale_y_log10() +
facet_wrap( ~ Type.of.feeding.interaction, ncol = 1,
strip.position = "right") + # separate plots for each fi
labs(y = "Predator mass in grams", x = " Prey Mass in grams") +
theme_bw() +
theme(legend.position = "bottom",
plot.margin = margin(50,100,50,100),
legend.text = element_text(size = 8),
legend.title = element_text(size = 10))+
guides(colour = guide_legend(nrow = 1))
plot
View(data)
# Convert Prey.mass from mg to g
data <- data %>%
mutate(Prey.mass = ifelse(Prey.mass.unit == "mg", Prey.mass / 1000, Prey.mass),
Prey.mass.unit = "g") # Update the unit to 'g' for consistency
# Create output directory
if (!dir.exists("../results")) {
dir.create("../results", showWarnings = FALSE)
}
# Define the plot
plot <- ggplot(data, aes(x = Prey.mass, y = Predator.mass, color = Predator.lifestage)) +
geom_point(shape = 3) +
geom_smooth(
method = "lm",
se = TRUE,
aes(color = Predator.lifestage),
linewidth = 0.5,
fullrange = TRUE
) +
scale_x_log10() +
scale_y_log10() +
labs(
x = "Prey Mass in grams",
y = "Predator mass in grams",
color = "Predator.lifestage"
) +
facet_wrap(
~ Type.of.feeding.interaction,
ncol = 1,
strip.position = "right"
) +
theme_light() +
theme(
legend.position = "bottom",
legend.text = element_text(size = 8),
legend.title = element_text(size = 8, face = "bold"),
legend.key = element_rect(fill = "lightgrey", color = "black", linewidth = 0.2),
legend.key.size = unit(4, "mm"),
legend.box.margin = margin(t = 0, r = 1, b = 0, l = 1),
legend.key.spacing.x = unit(2, "mm"),
axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
strip.text = element_text(size = 7, face = "bold", color = "black"),
panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
strip.background = element_rect(color = "black", fill = "grey", linewidth = 0.5),
strip.placement = "outside",
plot.margin = margin(t = 10, r = 100, b = 10, l = 100)
) +
guides(
color = guide_legend(nrow = 1)
)
plot
# Define input and output paths
data_path <- "../data/EcolArchives-E089-51-D1.csv"
pdf_output <- "../results/Visualizing_regressions.pdf"
csv_output <- "../results/PP_Regress_Results.csv"
# Read the dataset
if (!file.exists(data_path)) {
stop("Input data file not found. Please ensure '../data/EcolArchives-E089-51-D1.csv' exists.")
}
data <- read.csv(data_path)
# Define the plot
plot <- ggplot(data, aes(x = Prey.mass, y = Predator.mass, color = Predator.lifestage)) +
geom_point(shape = 3) +
geom_smooth(
method = "lm",
se = TRUE,
aes(color = Predator.lifestage),
linewidth = 0.5,
fullrange = TRUE
) +
scale_x_log10() +
scale_y_log10() +
labs(
x = "Prey Mass in grams",
y = "Predator mass in grams",
color = "Predator.lifestage"
) +
facet_wrap(
~ Type.of.feeding.interaction,
ncol = 1,
strip.position = "right"
) +
theme_light() +
theme(
legend.position = "bottom",
legend.text = element_text(size = 8),
legend.title = element_text(size = 8, face = "bold"),
legend.key = element_rect(fill = "lightgrey", color = "black", linewidth = 0.2),
legend.key.size = unit(4, "mm"),
legend.box.margin = margin(t = 0, r = 1, b = 0, l = 1),
legend.key.spacing.x = unit(2, "mm"),
axis.title.x = element_text(size = 9),
axis.title.y = element_text(size = 9),
strip.text = element_text(size = 7, face = "bold", color = "black"),
panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5),
strip.background = element_rect(color = "black", fill = "grey", linewidth = 0.5),
strip.placement = "outside",
plot.margin = margin(t = 10, r = 100, b = 10, l = 100)
) +
guides(
color = guide_legend(nrow = 1)
)
source("~/Documents/CMEECourseWork/week3/code/PP_regress.R")
# Load necessary packages
library(tidyverse)
library(broom)
# Test
# Clear the workspace
rm(list = ls())
source("~/Documents/CMEECourseWork/week3/code/PP_regress.R")
